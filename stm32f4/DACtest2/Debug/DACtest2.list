
DACtest2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000500  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08000688  08000688  00010688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080006a4  080006a4  000106a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080006a8  080006a8  000106a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000600  20000000  080006ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020600  2**0
                  CONTENTS
  7 .bss          00000020  20000600  20000600  00020600  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000620  20000620  00020600  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020600  2**0
                  CONTENTS, READONLY
 10 .debug_info   00001e33  00000000  00000000  00020630  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000621  00000000  00000000  00022463  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000178  00000000  00000000  00022a88  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000130  00000000  00000000  00022c00  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00000a2f  00000000  00000000  00022d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00000b75  00000000  00000000  0002375f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000242d4  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000004d8  00000000  00000000  00024350  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stab         00000024  00000000  00000000  00024828  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      0000003f  00000000  00000000  0002484c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000600 	.word	0x20000600
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000670 	.word	0x08000670

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000604 	.word	0x20000604
 80001c4:	08000670 	.word	0x08000670

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <initDAC>:
		 2219, 2277, 2315, 2326, 2310, 2264, 2191, 2097, 1988, 1874,
		 1766, 1677, 1616, 1594, 1618, 1694, 1822, 2000, 2222, 2479,
		 2758, 3045, 3323, 3578, 3793, 3958, 4060, 4095
};

void initDAC() {
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= BIT0; //enable clock gpioA
 80001dc:	4a17      	ldr	r2, [pc, #92]	; (800023c <initDAC+0x64>)
 80001de:	4b17      	ldr	r3, [pc, #92]	; (800023c <initDAC+0x64>)
 80001e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER |= BIT7;//alternate function pour PA4
 80001e8:	4a15      	ldr	r2, [pc, #84]	; (8000240 <initDAC+0x68>)
 80001ea:	4b15      	ldr	r3, [pc, #84]	; (8000240 <initDAC+0x68>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80001f2:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= BIT15 +BIT14+BIT13+BIT12; // dac pour PA4
 80001f4:	4a12      	ldr	r2, [pc, #72]	; (8000240 <initDAC+0x68>)
 80001f6:	4b12      	ldr	r3, [pc, #72]	; (8000240 <initDAC+0x68>)
 80001f8:	6a1b      	ldr	r3, [r3, #32]
 80001fa:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 80001fe:	6213      	str	r3, [r2, #32]

    // Enable the DAC clock
    RCC->APB1ENR |= RCC_APB1ENR_DACEN;
 8000200:	4a0e      	ldr	r2, [pc, #56]	; (800023c <initDAC+0x64>)
 8000202:	4b0e      	ldr	r3, [pc, #56]	; (800023c <initDAC+0x64>)
 8000204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000206:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800020a:	6413      	str	r3, [r2, #64]	; 0x40

    DAC->CR &= ~DAC_CR_EN1;
 800020c:	4a0d      	ldr	r2, [pc, #52]	; (8000244 <initDAC+0x6c>)
 800020e:	4b0d      	ldr	r3, [pc, #52]	; (8000244 <initDAC+0x6c>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	f023 0301 	bic.w	r3, r3, #1
 8000216:	6013      	str	r3, [r2, #0]

    // Configure DAC channel 1, PA4 alternate function DAC1_out
    DAC->CR &= ~DAC_CR_BOFF1; // Enable buffer pour DAC channel 1 DAC_CR_BOFF1
 8000218:	4a0a      	ldr	r2, [pc, #40]	; (8000244 <initDAC+0x6c>)
 800021a:	4b0a      	ldr	r3, [pc, #40]	; (8000244 <initDAC+0x6c>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	f023 0302 	bic.w	r3, r3, #2
 8000222:	6013      	str	r3, [r2, #0]
    //DAC->CR |= BIT12 |BIT5 |BIT2;//EN DMA, bit5 pour utiliser timer2 et bit 2 pour enable les triggers du timer 2
    DAC->CR |= DAC_CR_EN1;   // Enable DAC channel 1
 8000224:	4a07      	ldr	r2, [pc, #28]	; (8000244 <initDAC+0x6c>)
 8000226:	4b07      	ldr	r3, [pc, #28]	; (8000244 <initDAC+0x6c>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	f043 0301 	orr.w	r3, r3, #1
 800022e:	6013      	str	r3, [r2, #0]
}
 8000230:	bf00      	nop
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	40023800 	.word	0x40023800
 8000240:	40020000 	.word	0x40020000
 8000244:	40007400 	.word	0x40007400

08000248 <setDACValue>:

void setDACValue(uint16_t value) {
 8000248:	b480      	push	{r7}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
 800024e:	4603      	mov	r3, r0
 8000250:	80fb      	strh	r3, [r7, #6]
    // 12-bit range (0 to 4095)
    value &= 0x0FFF;
 8000252:	88fb      	ldrh	r3, [r7, #6]
 8000254:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000258:	80fb      	strh	r3, [r7, #6]

    //ecrit la valeur digitale au dac
    DAC->DHR12R1 = value;
 800025a:	4a04      	ldr	r2, [pc, #16]	; (800026c <setDACValue+0x24>)
 800025c:	88fb      	ldrh	r3, [r7, #6]
 800025e:	6093      	str	r3, [r2, #8]
}
 8000260:	bf00      	nop
 8000262:	370c      	adds	r7, #12
 8000264:	46bd      	mov	sp, r7
 8000266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026a:	4770      	bx	lr
 800026c:	40007400 	.word	0x40007400

08000270 <generationSignal>:
	NVIC->ISER[0] |= BIT28;

	TIM2->CR1 |= BIT0; //enable le timer2
}

void generationSignal(int SignalChoisi,int frequence) {
 8000270:	b580      	push	{r7, lr}
 8000272:	b088      	sub	sp, #32
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	6039      	str	r1, [r7, #0]

	if(SignalChoisi == 1){
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	2b01      	cmp	r3, #1
 800027e:	d11b      	bne.n	80002b8 <generationSignal+0x48>
		for(volatile int j = 0;j<NS;j++){// on envoi toutes les valeures du tableau à L'adc
 8000280:	2300      	movs	r3, #0
 8000282:	61fb      	str	r3, [r7, #28]
 8000284:	e014      	b.n	80002b0 <generationSignal+0x40>
			setDACValue(Sinus[j]);
 8000286:	69fb      	ldr	r3, [r7, #28]
 8000288:	4a2e      	ldr	r2, [pc, #184]	; (8000344 <generationSignal+0xd4>)
 800028a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800028e:	b29b      	uxth	r3, r3
 8000290:	4618      	mov	r0, r3
 8000292:	f7ff ffd9 	bl	8000248 <setDACValue>
			for(volatile int i = 0;i<frequence;i++);// fréquence du signal périodique divisé par 3.33, donc ici on à un signal à 333Hz (dépend de NS, de l'horloge du dac)
 8000296:	2300      	movs	r3, #0
 8000298:	61bb      	str	r3, [r7, #24]
 800029a:	e002      	b.n	80002a2 <generationSignal+0x32>
 800029c:	69bb      	ldr	r3, [r7, #24]
 800029e:	3301      	adds	r3, #1
 80002a0:	61bb      	str	r3, [r7, #24]
 80002a2:	69ba      	ldr	r2, [r7, #24]
 80002a4:	683b      	ldr	r3, [r7, #0]
 80002a6:	429a      	cmp	r2, r3
 80002a8:	dbf8      	blt.n	800029c <generationSignal+0x2c>
		for(volatile int j = 0;j<NS;j++){// on envoi toutes les valeures du tableau à L'adc
 80002aa:	69fb      	ldr	r3, [r7, #28]
 80002ac:	3301      	adds	r3, #1
 80002ae:	61fb      	str	r3, [r7, #28]
 80002b0:	69fb      	ldr	r3, [r7, #28]
 80002b2:	2b7f      	cmp	r3, #127	; 0x7f
 80002b4:	dde7      	ble.n	8000286 <generationSignal+0x16>
	}
	else{
		printf("error Mauvaise valeure\n");
	}

}
 80002b6:	e040      	b.n	800033a <generationSignal+0xca>
	else if(SignalChoisi == 2){
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	2b02      	cmp	r3, #2
 80002bc:	d11b      	bne.n	80002f6 <generationSignal+0x86>
		for(volatile int j = 0;j<NS;j++){// on envoi toutes les valeures du tableau à L'adc
 80002be:	2300      	movs	r3, #0
 80002c0:	617b      	str	r3, [r7, #20]
 80002c2:	e014      	b.n	80002ee <generationSignal+0x7e>
			setDACValue(Triangle[j]);
 80002c4:	697b      	ldr	r3, [r7, #20]
 80002c6:	4a20      	ldr	r2, [pc, #128]	; (8000348 <generationSignal+0xd8>)
 80002c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002cc:	b29b      	uxth	r3, r3
 80002ce:	4618      	mov	r0, r3
 80002d0:	f7ff ffba 	bl	8000248 <setDACValue>
			for(volatile int i = 0;i<frequence;i++);// fréquence du signal périodique divisé par 3.33, donc ici on à un signal à 333Hz (dépend de NS, de l'horloge du dac)
 80002d4:	2300      	movs	r3, #0
 80002d6:	613b      	str	r3, [r7, #16]
 80002d8:	e002      	b.n	80002e0 <generationSignal+0x70>
 80002da:	693b      	ldr	r3, [r7, #16]
 80002dc:	3301      	adds	r3, #1
 80002de:	613b      	str	r3, [r7, #16]
 80002e0:	693a      	ldr	r2, [r7, #16]
 80002e2:	683b      	ldr	r3, [r7, #0]
 80002e4:	429a      	cmp	r2, r3
 80002e6:	dbf8      	blt.n	80002da <generationSignal+0x6a>
		for(volatile int j = 0;j<NS;j++){// on envoi toutes les valeures du tableau à L'adc
 80002e8:	697b      	ldr	r3, [r7, #20]
 80002ea:	3301      	adds	r3, #1
 80002ec:	617b      	str	r3, [r7, #20]
 80002ee:	697b      	ldr	r3, [r7, #20]
 80002f0:	2b7f      	cmp	r3, #127	; 0x7f
 80002f2:	dde7      	ble.n	80002c4 <generationSignal+0x54>
}
 80002f4:	e021      	b.n	800033a <generationSignal+0xca>
	else if(SignalChoisi == 3){
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	2b03      	cmp	r3, #3
 80002fa:	d11b      	bne.n	8000334 <generationSignal+0xc4>
		for(volatile int j = 0;j<NS;j++){// on envoi toutes les valeures du tableau à L'adc
 80002fc:	2300      	movs	r3, #0
 80002fe:	60fb      	str	r3, [r7, #12]
 8000300:	e014      	b.n	800032c <generationSignal+0xbc>
			setDACValue(Sinc[j]);
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	4a11      	ldr	r2, [pc, #68]	; (800034c <generationSignal+0xdc>)
 8000306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800030a:	b29b      	uxth	r3, r3
 800030c:	4618      	mov	r0, r3
 800030e:	f7ff ff9b 	bl	8000248 <setDACValue>
			for(volatile int i = 0;i<frequence;i++);// fréquence du signal périodique divisé par 3.33, donc ici on à un signal à 333Hz (dépend de NS, de l'horloge du dac)
 8000312:	2300      	movs	r3, #0
 8000314:	60bb      	str	r3, [r7, #8]
 8000316:	e002      	b.n	800031e <generationSignal+0xae>
 8000318:	68bb      	ldr	r3, [r7, #8]
 800031a:	3301      	adds	r3, #1
 800031c:	60bb      	str	r3, [r7, #8]
 800031e:	68ba      	ldr	r2, [r7, #8]
 8000320:	683b      	ldr	r3, [r7, #0]
 8000322:	429a      	cmp	r2, r3
 8000324:	dbf8      	blt.n	8000318 <generationSignal+0xa8>
		for(volatile int j = 0;j<NS;j++){// on envoi toutes les valeures du tableau à L'adc
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	3301      	adds	r3, #1
 800032a:	60fb      	str	r3, [r7, #12]
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	2b7f      	cmp	r3, #127	; 0x7f
 8000330:	dde7      	ble.n	8000302 <generationSignal+0x92>
}
 8000332:	e002      	b.n	800033a <generationSignal+0xca>
		printf("error Mauvaise valeure\n");
 8000334:	4806      	ldr	r0, [pc, #24]	; (8000350 <generationSignal+0xe0>)
 8000336:	f000 f943 	bl	80005c0 <puts>
}
 800033a:	bf00      	nop
 800033c:	3720      	adds	r7, #32
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	20000200 	.word	0x20000200
 8000348:	20000000 	.word	0x20000000
 800034c:	20000400 	.word	0x20000400
 8000350:	08000688 	.word	0x08000688

08000354 <main>:

int main(void) {
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
    // Initialize the DAC
	volatile uint32_t debug;
    initDAC();
 800035a:	f7ff ff3d 	bl	80001d8 <initDAC>
    //ConfigTimer2(100);
    //configureDMA();
    //startDMA();
    while (1) {

    	generationSignal(2,100);//parametre1= 1,2,3 pour sinus,triangle,sinc et parametre2 pour la fréquence
 800035e:	2164      	movs	r1, #100	; 0x64
 8000360:	2002      	movs	r0, #2
 8000362:	f7ff ff85 	bl	8000270 <generationSignal>
 8000366:	e7fa      	b.n	800035e <main+0xa>

08000368 <DMA2_Stream0_IRQHandler>:
    }
}

void DMA2_Stream0_IRQHandler(){
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
	DMA2->LIFCR|=BIT5;//p327 pour clear le flag pour le canal0
 800036c:	4a05      	ldr	r2, [pc, #20]	; (8000384 <DMA2_Stream0_IRQHandler+0x1c>)
 800036e:	4b05      	ldr	r3, [pc, #20]	; (8000384 <DMA2_Stream0_IRQHandler+0x1c>)
 8000370:	689b      	ldr	r3, [r3, #8]
 8000372:	f043 0320 	orr.w	r3, r3, #32
 8000376:	6093      	str	r3, [r2, #8]
}
 8000378:	bf00      	nop
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	40026400 	.word	0x40026400

08000388 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
	TIM2->SR &= ~BIT0; //pour clear le flag
 800038c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000390:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000394:	8a1b      	ldrh	r3, [r3, #16]
 8000396:	b29b      	uxth	r3, r3
 8000398:	f023 0301 	bic.w	r3, r3, #1
 800039c:	b29b      	uxth	r3, r3
 800039e:	8213      	strh	r3, [r2, #16]
	//GPIOD->ODR ^= BIT12|BIT15;
}
 80003a0:	bf00      	nop
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
	...

080003ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003e4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80003b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80003b2:	e003      	b.n	80003bc <LoopCopyDataInit>

080003b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80003b4:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80003b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80003b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80003ba:	3104      	adds	r1, #4

080003bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003bc:	480b      	ldr	r0, [pc, #44]	; (80003ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80003be:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80003c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80003c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80003c4:	d3f6      	bcc.n	80003b4 <CopyDataInit>
  ldr  r2, =_sbss
 80003c6:	4a0b      	ldr	r2, [pc, #44]	; (80003f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80003c8:	e002      	b.n	80003d0 <LoopFillZerobss>

080003ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80003ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80003cc:	f842 3b04 	str.w	r3, [r2], #4

080003d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003d0:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80003d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80003d4:	d3f9      	bcc.n	80003ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003d6:	f000 f841 	bl	800045c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003da:	f000 f91d 	bl	8000618 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003de:	f7ff ffb9 	bl	8000354 <main>
  bx  lr    
 80003e2:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003e4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80003e8:	080006ac 	.word	0x080006ac
  ldr  r0, =_sdata
 80003ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80003f0:	20000600 	.word	0x20000600
  ldr  r2, =_sbss
 80003f4:	20000600 	.word	0x20000600
  ldr  r3, = _ebss
 80003f8:	20000620 	.word	0x20000620

080003fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003fc:	e7fe      	b.n	80003fc <ADC_IRQHandler>

080003fe <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80003fe:	b480      	push	{r7}
 8000400:	af00      	add	r7, sp, #0
}
 8000402:	bf00      	nop
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr

0800040c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000410:	e7fe      	b.n	8000410 <HardFault_Handler+0x4>

08000412 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000412:	b480      	push	{r7}
 8000414:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000416:	e7fe      	b.n	8000416 <MemManage_Handler+0x4>

08000418 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800041c:	e7fe      	b.n	800041c <BusFault_Handler+0x4>

0800041e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800041e:	b480      	push	{r7}
 8000420:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000422:	e7fe      	b.n	8000422 <UsageFault_Handler+0x4>

08000424 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
}
 8000428:	bf00      	nop
 800042a:	46bd      	mov	sp, r7
 800042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000430:	4770      	bx	lr

08000432 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000432:	b480      	push	{r7}
 8000434:	af00      	add	r7, sp, #0
}
 8000436:	bf00      	nop
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr

08000440 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
}
 8000444:	bf00      	nop
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr

0800044e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800044e:	b480      	push	{r7}
 8000450:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8000452:	bf00      	nop
 8000454:	46bd      	mov	sp, r7
 8000456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045a:	4770      	bx	lr

0800045c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000460:	4a16      	ldr	r2, [pc, #88]	; (80004bc <SystemInit+0x60>)
 8000462:	4b16      	ldr	r3, [pc, #88]	; (80004bc <SystemInit+0x60>)
 8000464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000468:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800046c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000470:	4a13      	ldr	r2, [pc, #76]	; (80004c0 <SystemInit+0x64>)
 8000472:	4b13      	ldr	r3, [pc, #76]	; (80004c0 <SystemInit+0x64>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	f043 0301 	orr.w	r3, r3, #1
 800047a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800047c:	4b10      	ldr	r3, [pc, #64]	; (80004c0 <SystemInit+0x64>)
 800047e:	2200      	movs	r2, #0
 8000480:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000482:	4a0f      	ldr	r2, [pc, #60]	; (80004c0 <SystemInit+0x64>)
 8000484:	4b0e      	ldr	r3, [pc, #56]	; (80004c0 <SystemInit+0x64>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800048c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000490:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000492:	4b0b      	ldr	r3, [pc, #44]	; (80004c0 <SystemInit+0x64>)
 8000494:	4a0b      	ldr	r2, [pc, #44]	; (80004c4 <SystemInit+0x68>)
 8000496:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000498:	4a09      	ldr	r2, [pc, #36]	; (80004c0 <SystemInit+0x64>)
 800049a:	4b09      	ldr	r3, [pc, #36]	; (80004c0 <SystemInit+0x64>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80004a4:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <SystemInit+0x64>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80004aa:	f000 f80d 	bl	80004c8 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80004ae:	4b03      	ldr	r3, [pc, #12]	; (80004bc <SystemInit+0x60>)
 80004b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80004b4:	609a      	str	r2, [r3, #8]
#endif
}
 80004b6:	bf00      	nop
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	e000ed00 	.word	0xe000ed00
 80004c0:	40023800 	.word	0x40023800
 80004c4:	24003010 	.word	0x24003010

080004c8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80004ce:	2300      	movs	r3, #0
 80004d0:	607b      	str	r3, [r7, #4]
 80004d2:	2300      	movs	r3, #0
 80004d4:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80004d6:	4a36      	ldr	r2, [pc, #216]	; (80005b0 <SetSysClock+0xe8>)
 80004d8:	4b35      	ldr	r3, [pc, #212]	; (80005b0 <SetSysClock+0xe8>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004e0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80004e2:	4b33      	ldr	r3, [pc, #204]	; (80005b0 <SetSysClock+0xe8>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004ea:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	3301      	adds	r3, #1
 80004f0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d103      	bne.n	8000500 <SetSysClock+0x38>
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80004fe:	d1f0      	bne.n	80004e2 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000500:	4b2b      	ldr	r3, [pc, #172]	; (80005b0 <SetSysClock+0xe8>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000508:	2b00      	cmp	r3, #0
 800050a:	d002      	beq.n	8000512 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800050c:	2301      	movs	r3, #1
 800050e:	603b      	str	r3, [r7, #0]
 8000510:	e001      	b.n	8000516 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000512:	2300      	movs	r3, #0
 8000514:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	2b01      	cmp	r3, #1
 800051a:	d142      	bne.n	80005a2 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800051c:	4a24      	ldr	r2, [pc, #144]	; (80005b0 <SetSysClock+0xe8>)
 800051e:	4b24      	ldr	r3, [pc, #144]	; (80005b0 <SetSysClock+0xe8>)
 8000520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000522:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000526:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000528:	4a22      	ldr	r2, [pc, #136]	; (80005b4 <SetSysClock+0xec>)
 800052a:	4b22      	ldr	r3, [pc, #136]	; (80005b4 <SetSysClock+0xec>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000532:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000534:	4a1e      	ldr	r2, [pc, #120]	; (80005b0 <SetSysClock+0xe8>)
 8000536:	4b1e      	ldr	r3, [pc, #120]	; (80005b0 <SetSysClock+0xe8>)
 8000538:	689b      	ldr	r3, [r3, #8]
 800053a:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800053c:	4a1c      	ldr	r2, [pc, #112]	; (80005b0 <SetSysClock+0xe8>)
 800053e:	4b1c      	ldr	r3, [pc, #112]	; (80005b0 <SetSysClock+0xe8>)
 8000540:	689b      	ldr	r3, [r3, #8]
 8000542:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000546:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000548:	4a19      	ldr	r2, [pc, #100]	; (80005b0 <SetSysClock+0xe8>)
 800054a:	4b19      	ldr	r3, [pc, #100]	; (80005b0 <SetSysClock+0xe8>)
 800054c:	689b      	ldr	r3, [r3, #8]
 800054e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000552:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000554:	4b16      	ldr	r3, [pc, #88]	; (80005b0 <SetSysClock+0xe8>)
 8000556:	4a18      	ldr	r2, [pc, #96]	; (80005b8 <SetSysClock+0xf0>)
 8000558:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800055a:	4a15      	ldr	r2, [pc, #84]	; (80005b0 <SetSysClock+0xe8>)
 800055c:	4b14      	ldr	r3, [pc, #80]	; (80005b0 <SetSysClock+0xe8>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000564:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000566:	bf00      	nop
 8000568:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <SetSysClock+0xe8>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000570:	2b00      	cmp	r3, #0
 8000572:	d0f9      	beq.n	8000568 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000574:	4b11      	ldr	r3, [pc, #68]	; (80005bc <SetSysClock+0xf4>)
 8000576:	f240 7205 	movw	r2, #1797	; 0x705
 800057a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800057c:	4a0c      	ldr	r2, [pc, #48]	; (80005b0 <SetSysClock+0xe8>)
 800057e:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <SetSysClock+0xe8>)
 8000580:	689b      	ldr	r3, [r3, #8]
 8000582:	f023 0303 	bic.w	r3, r3, #3
 8000586:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000588:	4a09      	ldr	r2, [pc, #36]	; (80005b0 <SetSysClock+0xe8>)
 800058a:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <SetSysClock+0xe8>)
 800058c:	689b      	ldr	r3, [r3, #8]
 800058e:	f043 0302 	orr.w	r3, r3, #2
 8000592:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000594:	bf00      	nop
 8000596:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <SetSysClock+0xe8>)
 8000598:	689b      	ldr	r3, [r3, #8]
 800059a:	f003 030c 	and.w	r3, r3, #12
 800059e:	2b08      	cmp	r3, #8
 80005a0:	d1f9      	bne.n	8000596 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	40023800 	.word	0x40023800
 80005b4:	40007000 	.word	0x40007000
 80005b8:	07405419 	.word	0x07405419
 80005bc:	40023c00 	.word	0x40023c00

080005c0 <puts>:
**  the result is EOF.
**
**===========================================================================
*/
int puts(const char *s)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	int length = strlen(s);
 80005c8:	6878      	ldr	r0, [r7, #4]
 80005ca:	f7ff fdfd 	bl	80001c8 <strlen>
 80005ce:	4603      	mov	r3, r0
 80005d0:	613b      	str	r3, [r7, #16]
	int numbytes = 0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
	int res;

	numbytes = _write(1, (char*)s, length);
 80005d6:	693a      	ldr	r2, [r7, #16]
 80005d8:	6879      	ldr	r1, [r7, #4]
 80005da:	2001      	movs	r0, #1
 80005dc:	f000 f840 	bl	8000660 <_write>
 80005e0:	60f8      	str	r0, [r7, #12]
	numbytes += _write(1, "\n", 1);
 80005e2:	2201      	movs	r2, #1
 80005e4:	490b      	ldr	r1, [pc, #44]	; (8000614 <puts+0x54>)
 80005e6:	2001      	movs	r0, #1
 80005e8:	f000 f83a 	bl	8000660 <_write>
 80005ec:	4602      	mov	r2, r0
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	4413      	add	r3, r2
 80005f2:	60fb      	str	r3, [r7, #12]

	if (numbytes == (length+1))
 80005f4:	693b      	ldr	r3, [r7, #16]
 80005f6:	1c5a      	adds	r2, r3, #1
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	429a      	cmp	r2, r3
 80005fc:	d102      	bne.n	8000604 <puts+0x44>
	{
		res = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	617b      	str	r3, [r7, #20]
 8000602:	e002      	b.n	800060a <puts+0x4a>
	}
	else
	{
		res = EOF;
 8000604:	f04f 33ff 	mov.w	r3, #4294967295
 8000608:	617b      	str	r3, [r7, #20]
	}

	return res;
 800060a:	697b      	ldr	r3, [r7, #20]
}
 800060c:	4618      	mov	r0, r3
 800060e:	3718      	adds	r7, #24
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	080006a0 	.word	0x080006a0

08000618 <__libc_init_array>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	4e0d      	ldr	r6, [pc, #52]	; (8000650 <__libc_init_array+0x38>)
 800061c:	4c0d      	ldr	r4, [pc, #52]	; (8000654 <__libc_init_array+0x3c>)
 800061e:	1ba4      	subs	r4, r4, r6
 8000620:	10a4      	asrs	r4, r4, #2
 8000622:	2500      	movs	r5, #0
 8000624:	42a5      	cmp	r5, r4
 8000626:	d109      	bne.n	800063c <__libc_init_array+0x24>
 8000628:	4e0b      	ldr	r6, [pc, #44]	; (8000658 <__libc_init_array+0x40>)
 800062a:	4c0c      	ldr	r4, [pc, #48]	; (800065c <__libc_init_array+0x44>)
 800062c:	f000 f820 	bl	8000670 <_init>
 8000630:	1ba4      	subs	r4, r4, r6
 8000632:	10a4      	asrs	r4, r4, #2
 8000634:	2500      	movs	r5, #0
 8000636:	42a5      	cmp	r5, r4
 8000638:	d105      	bne.n	8000646 <__libc_init_array+0x2e>
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000640:	4798      	blx	r3
 8000642:	3501      	adds	r5, #1
 8000644:	e7ee      	b.n	8000624 <__libc_init_array+0xc>
 8000646:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800064a:	4798      	blx	r3
 800064c:	3501      	adds	r5, #1
 800064e:	e7f2      	b.n	8000636 <__libc_init_array+0x1e>
 8000650:	080006a4 	.word	0x080006a4
 8000654:	080006a4 	.word	0x080006a4
 8000658:	080006a4 	.word	0x080006a4
 800065c:	080006a8 	.word	0x080006a8

08000660 <_write>:
 8000660:	4b02      	ldr	r3, [pc, #8]	; (800066c <_write+0xc>)
 8000662:	2258      	movs	r2, #88	; 0x58
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	f04f 30ff 	mov.w	r0, #4294967295
 800066a:	4770      	bx	lr
 800066c:	2000061c 	.word	0x2000061c

08000670 <_init>:
 8000670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000672:	bf00      	nop
 8000674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000676:	bc08      	pop	{r3}
 8000678:	469e      	mov	lr, r3
 800067a:	4770      	bx	lr

0800067c <_fini>:
 800067c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800067e:	bf00      	nop
 8000680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000682:	bc08      	pop	{r3}
 8000684:	469e      	mov	lr, r3
 8000686:	4770      	bx	lr

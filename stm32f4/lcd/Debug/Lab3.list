
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009e4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08000b6c  08000b6c  00010b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000bac  08000bac  00010bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000bb0  08000bb0  00010bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08000bb4  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          00000024  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000028  20000028  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   00000ed6  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000003a2  00000000  00000000  00020f0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000138  00000000  00000000  000212b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000100  00000000  00000000  000213e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000089b  00000000  00000000  000214e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000005ad  00000000  00000000  00021d83  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00022330  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000003ac  00000000  00000000  000223ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00022758  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000b54 	.word	0x08000b54

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000b54 	.word	0x08000b54

080001c8 <configLCD>:
**
**  Abstract: main program
**
**===========================================================================
*/
void configLCD(){
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
		RCC->AHB1ENR |= BIT3 +BIT4; //activation des clk pour GPIO D et E
 80001cc:	4a0c      	ldr	r2, [pc, #48]	; (8000200 <configLCD+0x38>)
 80001ce:	4b0c      	ldr	r3, [pc, #48]	; (8000200 <configLCD+0x38>)
 80001d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001d2:	f043 0318 	orr.w	r3, r3, #24
 80001d6:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOE->MODER |= (BIT0 + BIT2+ BIT4); //Mise sur output des pins PE0,PE1,PE2
 80001d8:	4a0a      	ldr	r2, [pc, #40]	; (8000204 <configLCD+0x3c>)
 80001da:	4b0a      	ldr	r3, [pc, #40]	; (8000204 <configLCD+0x3c>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	f043 0315 	orr.w	r3, r3, #21
 80001e2:	6013      	str	r3, [r2, #0]
		GPIOD->MODER |= (BIT0|BIT2|BIT4|BIT6|BIT8|BIT10|BIT12|BIT14);//data D0 a D7 en mode sortie
 80001e4:	4a08      	ldr	r2, [pc, #32]	; (8000208 <configLCD+0x40>)
 80001e6:	4b08      	ldr	r3, [pc, #32]	; (8000208 <configLCD+0x40>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 80001ee:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 80001f2:	6013      	str	r3, [r2, #0]
}
 80001f4:	bf00      	nop
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	40023800 	.word	0x40023800
 8000204:	40021000 	.word	0x40021000
 8000208:	40020c00 	.word	0x40020c00

0800020c <CursorLeft>:
	for (int k = 0; k < 100000; k++){}
	GPIOE->ODR &= ~(0xff);// enable 0 logique et remise a 0
}


void CursorLeft(){
 800020c:	b480      	push	{r7}
 800020e:	b083      	sub	sp, #12
 8000210:	af00      	add	r7, sp, #0
	GPIOD->ODR &= ~(0xff);//remise a 0
 8000212:	4a1d      	ldr	r2, [pc, #116]	; (8000288 <CursorLeft+0x7c>)
 8000214:	4b1c      	ldr	r3, [pc, #112]	; (8000288 <CursorLeft+0x7c>)
 8000216:	695b      	ldr	r3, [r3, #20]
 8000218:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800021c:	6153      	str	r3, [r2, #20]
	GPIOE->ODR &= ~(0xff);
 800021e:	4a1b      	ldr	r2, [pc, #108]	; (800028c <CursorLeft+0x80>)
 8000220:	4b1a      	ldr	r3, [pc, #104]	; (800028c <CursorLeft+0x80>)
 8000222:	695b      	ldr	r3, [r3, #20]
 8000224:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000228:	6153      	str	r3, [r2, #20]
	GPIOD->ODR |= BIT4;
 800022a:	4a17      	ldr	r2, [pc, #92]	; (8000288 <CursorLeft+0x7c>)
 800022c:	4b16      	ldr	r3, [pc, #88]	; (8000288 <CursorLeft+0x7c>)
 800022e:	695b      	ldr	r3, [r3, #20]
 8000230:	f043 0310 	orr.w	r3, r3, #16
 8000234:	6153      	str	r3, [r2, #20]
	for (int k = 0; k < 10000; k++){}
 8000236:	2300      	movs	r3, #0
 8000238:	607b      	str	r3, [r7, #4]
 800023a:	e002      	b.n	8000242 <CursorLeft+0x36>
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	3301      	adds	r3, #1
 8000240:	607b      	str	r3, [r7, #4]
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f242 720f 	movw	r2, #9999	; 0x270f
 8000248:	4293      	cmp	r3, r2
 800024a:	ddf7      	ble.n	800023c <CursorLeft+0x30>
	GPIOE->ODR |= BIT2;// enable 1 logique
 800024c:	4a0f      	ldr	r2, [pc, #60]	; (800028c <CursorLeft+0x80>)
 800024e:	4b0f      	ldr	r3, [pc, #60]	; (800028c <CursorLeft+0x80>)
 8000250:	695b      	ldr	r3, [r3, #20]
 8000252:	f043 0304 	orr.w	r3, r3, #4
 8000256:	6153      	str	r3, [r2, #20]
	for (int k = 0; k < 10000; k++){}
 8000258:	2300      	movs	r3, #0
 800025a:	603b      	str	r3, [r7, #0]
 800025c:	e002      	b.n	8000264 <CursorLeft+0x58>
 800025e:	683b      	ldr	r3, [r7, #0]
 8000260:	3301      	adds	r3, #1
 8000262:	603b      	str	r3, [r7, #0]
 8000264:	683b      	ldr	r3, [r7, #0]
 8000266:	f242 720f 	movw	r2, #9999	; 0x270f
 800026a:	4293      	cmp	r3, r2
 800026c:	ddf7      	ble.n	800025e <CursorLeft+0x52>
	GPIOE->ODR &= ~(0xff);// enable 0 logique et remise a 0
 800026e:	4a07      	ldr	r2, [pc, #28]	; (800028c <CursorLeft+0x80>)
 8000270:	4b06      	ldr	r3, [pc, #24]	; (800028c <CursorLeft+0x80>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000278:	6153      	str	r3, [r2, #20]
}
 800027a:	bf00      	nop
 800027c:	370c      	adds	r7, #12
 800027e:	46bd      	mov	sp, r7
 8000280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000284:	4770      	bx	lr
 8000286:	bf00      	nop
 8000288:	40020c00 	.word	0x40020c00
 800028c:	40021000 	.word	0x40021000

08000290 <CursorStartLine>:

void CursorStartLine(){// met le curseur au debut de la ligne
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	CursorLeft();
 8000294:	f7ff ffba 	bl	800020c <CursorLeft>
	CursorLeft();
 8000298:	f7ff ffb8 	bl	800020c <CursorLeft>
	CursorLeft();
 800029c:	f7ff ffb6 	bl	800020c <CursorLeft>
	CursorLeft();
 80002a0:	f7ff ffb4 	bl	800020c <CursorLeft>
	CursorLeft();
 80002a4:	f7ff ffb2 	bl	800020c <CursorLeft>
	CursorLeft();
 80002a8:	f7ff ffb0 	bl	800020c <CursorLeft>
	CursorLeft();
 80002ac:	f7ff ffae 	bl	800020c <CursorLeft>
	CursorLeft();
 80002b0:	f7ff ffac 	bl	800020c <CursorLeft>
	CursorLeft();
 80002b4:	f7ff ffaa 	bl	800020c <CursorLeft>
	CursorLeft();
 80002b8:	f7ff ffa8 	bl	800020c <CursorLeft>
	CursorLeft();
 80002bc:	f7ff ffa6 	bl	800020c <CursorLeft>
	CursorLeft();
 80002c0:	f7ff ffa4 	bl	800020c <CursorLeft>
	CursorLeft();
 80002c4:	f7ff ffa2 	bl	800020c <CursorLeft>
	CursorLeft();
 80002c8:	f7ff ffa0 	bl	800020c <CursorLeft>
	CursorLeft();
 80002cc:	f7ff ff9e 	bl	800020c <CursorLeft>
	CursorLeft();
 80002d0:	f7ff ff9c 	bl	800020c <CursorLeft>
}
 80002d4:	bf00      	nop
 80002d6:	bd80      	pop	{r7, pc}

080002d8 <ClearLCD>:


void ClearLCD(){
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
	GPIOD->ODR &= ~(0xff);//remise a 0
 80002de:	4a1c      	ldr	r2, [pc, #112]	; (8000350 <ClearLCD+0x78>)
 80002e0:	4b1b      	ldr	r3, [pc, #108]	; (8000350 <ClearLCD+0x78>)
 80002e2:	695b      	ldr	r3, [r3, #20]
 80002e4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80002e8:	6153      	str	r3, [r2, #20]
	GPIOE->ODR &= ~(0xff);
 80002ea:	4a1a      	ldr	r2, [pc, #104]	; (8000354 <ClearLCD+0x7c>)
 80002ec:	4b19      	ldr	r3, [pc, #100]	; (8000354 <ClearLCD+0x7c>)
 80002ee:	695b      	ldr	r3, [r3, #20]
 80002f0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80002f4:	6153      	str	r3, [r2, #20]
	GPIOD->ODR |= BIT0;
 80002f6:	4a16      	ldr	r2, [pc, #88]	; (8000350 <ClearLCD+0x78>)
 80002f8:	4b15      	ldr	r3, [pc, #84]	; (8000350 <ClearLCD+0x78>)
 80002fa:	695b      	ldr	r3, [r3, #20]
 80002fc:	f043 0301 	orr.w	r3, r3, #1
 8000300:	6153      	str	r3, [r2, #20]
	for (int k = 0; k < 100000; k++){}
 8000302:	2300      	movs	r3, #0
 8000304:	607b      	str	r3, [r7, #4]
 8000306:	e002      	b.n	800030e <ClearLCD+0x36>
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	3301      	adds	r3, #1
 800030c:	607b      	str	r3, [r7, #4]
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	4a11      	ldr	r2, [pc, #68]	; (8000358 <ClearLCD+0x80>)
 8000312:	4293      	cmp	r3, r2
 8000314:	ddf8      	ble.n	8000308 <ClearLCD+0x30>
	GPIOE->ODR |= BIT2;// enable 1 logique
 8000316:	4a0f      	ldr	r2, [pc, #60]	; (8000354 <ClearLCD+0x7c>)
 8000318:	4b0e      	ldr	r3, [pc, #56]	; (8000354 <ClearLCD+0x7c>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	f043 0304 	orr.w	r3, r3, #4
 8000320:	6153      	str	r3, [r2, #20]
	for (int k = 0; k < 100000; k++){}
 8000322:	2300      	movs	r3, #0
 8000324:	603b      	str	r3, [r7, #0]
 8000326:	e002      	b.n	800032e <ClearLCD+0x56>
 8000328:	683b      	ldr	r3, [r7, #0]
 800032a:	3301      	adds	r3, #1
 800032c:	603b      	str	r3, [r7, #0]
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	4a09      	ldr	r2, [pc, #36]	; (8000358 <ClearLCD+0x80>)
 8000332:	4293      	cmp	r3, r2
 8000334:	ddf8      	ble.n	8000328 <ClearLCD+0x50>
	GPIOE->ODR &= ~(0xff);// enable 0 logique et remise a 0
 8000336:	4a07      	ldr	r2, [pc, #28]	; (8000354 <ClearLCD+0x7c>)
 8000338:	4b06      	ldr	r3, [pc, #24]	; (8000354 <ClearLCD+0x7c>)
 800033a:	695b      	ldr	r3, [r3, #20]
 800033c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000340:	6153      	str	r3, [r2, #20]
}
 8000342:	bf00      	nop
 8000344:	370c      	adds	r7, #12
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	40020c00 	.word	0x40020c00
 8000354:	40021000 	.word	0x40021000
 8000358:	0001869f 	.word	0x0001869f

0800035c <writeByteLCD>:
void writeByteLCD(__IO uint8_t d){
 800035c:	b480      	push	{r7}
 800035e:	b085      	sub	sp, #20
 8000360:	af00      	add	r7, sp, #0
 8000362:	4603      	mov	r3, r0
 8000364:	71fb      	strb	r3, [r7, #7]
	GPIOD->ODR &= ~(0xff);//remise a 0
 8000366:	4a1c      	ldr	r2, [pc, #112]	; (80003d8 <writeByteLCD+0x7c>)
 8000368:	4b1b      	ldr	r3, [pc, #108]	; (80003d8 <writeByteLCD+0x7c>)
 800036a:	695b      	ldr	r3, [r3, #20]
 800036c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000370:	6153      	str	r3, [r2, #20]
	GPIOD->ODR |= d; // ecris l'octet
 8000372:	79fb      	ldrb	r3, [r7, #7]
 8000374:	b2d9      	uxtb	r1, r3
 8000376:	4a18      	ldr	r2, [pc, #96]	; (80003d8 <writeByteLCD+0x7c>)
 8000378:	4b17      	ldr	r3, [pc, #92]	; (80003d8 <writeByteLCD+0x7c>)
 800037a:	695b      	ldr	r3, [r3, #20]
 800037c:	430b      	orrs	r3, r1
 800037e:	6153      	str	r3, [r2, #20]
	GPIOE->ODR |= BIT0;// bit pour signifier qu'on ecrit
 8000380:	4a16      	ldr	r2, [pc, #88]	; (80003dc <writeByteLCD+0x80>)
 8000382:	4b16      	ldr	r3, [pc, #88]	; (80003dc <writeByteLCD+0x80>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	f043 0301 	orr.w	r3, r3, #1
 800038a:	6153      	str	r3, [r2, #20]
	for (int k = 0; k < 100000; k++){}
 800038c:	2300      	movs	r3, #0
 800038e:	60fb      	str	r3, [r7, #12]
 8000390:	e002      	b.n	8000398 <writeByteLCD+0x3c>
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	3301      	adds	r3, #1
 8000396:	60fb      	str	r3, [r7, #12]
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	4a11      	ldr	r2, [pc, #68]	; (80003e0 <writeByteLCD+0x84>)
 800039c:	4293      	cmp	r3, r2
 800039e:	ddf8      	ble.n	8000392 <writeByteLCD+0x36>
	GPIOE->ODR |= BIT2; // enable 1 logique
 80003a0:	4a0e      	ldr	r2, [pc, #56]	; (80003dc <writeByteLCD+0x80>)
 80003a2:	4b0e      	ldr	r3, [pc, #56]	; (80003dc <writeByteLCD+0x80>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	f043 0304 	orr.w	r3, r3, #4
 80003aa:	6153      	str	r3, [r2, #20]
	for (int k = 0; k < 100000; k++){}
 80003ac:	2300      	movs	r3, #0
 80003ae:	60bb      	str	r3, [r7, #8]
 80003b0:	e002      	b.n	80003b8 <writeByteLCD+0x5c>
 80003b2:	68bb      	ldr	r3, [r7, #8]
 80003b4:	3301      	adds	r3, #1
 80003b6:	60bb      	str	r3, [r7, #8]
 80003b8:	68bb      	ldr	r3, [r7, #8]
 80003ba:	4a09      	ldr	r2, [pc, #36]	; (80003e0 <writeByteLCD+0x84>)
 80003bc:	4293      	cmp	r3, r2
 80003be:	ddf8      	ble.n	80003b2 <writeByteLCD+0x56>
	GPIOE->ODR &= ~(0xff);// enable 0 logique et remise a 0
 80003c0:	4a06      	ldr	r2, [pc, #24]	; (80003dc <writeByteLCD+0x80>)
 80003c2:	4b06      	ldr	r3, [pc, #24]	; (80003dc <writeByteLCD+0x80>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80003ca:	6153      	str	r3, [r2, #20]
}
 80003cc:	bf00      	nop
 80003ce:	3714      	adds	r7, #20
 80003d0:	46bd      	mov	sp, r7
 80003d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d6:	4770      	bx	lr
 80003d8:	40020c00 	.word	0x40020c00
 80003dc:	40021000 	.word	0x40021000
 80003e0:	0001869f 	.word	0x0001869f

080003e4 <writeStringLCD>:

void writeStringLCD(const char * p_str){
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b084      	sub	sp, #16
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
	int i =0;
 80003ec:	2300      	movs	r3, #0
 80003ee:	60fb      	str	r3, [r7, #12]
	while(p_str[i] != '\0'){ // tant que transmission pas complete
 80003f0:	e009      	b.n	8000406 <writeStringLCD+0x22>
		writeByteLCD(p_str[i++]);
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	1c5a      	adds	r2, r3, #1
 80003f6:	60fa      	str	r2, [r7, #12]
 80003f8:	461a      	mov	r2, r3
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	4413      	add	r3, r2
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	4618      	mov	r0, r3
 8000402:	f7ff ffab 	bl	800035c <writeByteLCD>
	while(p_str[i] != '\0'){ // tant que transmission pas complete
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	687a      	ldr	r2, [r7, #4]
 800040a:	4413      	add	r3, r2
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	2b00      	cmp	r3, #0
 8000410:	d1ef      	bne.n	80003f2 <writeStringLCD+0xe>
		}
}
 8000412:	bf00      	nop
 8000414:	3710      	adds	r7, #16
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
	...

0800041c <CursorHome>:

void CursorHome(){
 800041c:	b480      	push	{r7}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
	GPIOD->ODR &= ~(0xff);//remise a 0
 8000422:	4a19      	ldr	r2, [pc, #100]	; (8000488 <CursorHome+0x6c>)
 8000424:	4b18      	ldr	r3, [pc, #96]	; (8000488 <CursorHome+0x6c>)
 8000426:	695b      	ldr	r3, [r3, #20]
 8000428:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800042c:	6153      	str	r3, [r2, #20]
	GPIOD->ODR |= (BIT1);// cursor return home
 800042e:	4a16      	ldr	r2, [pc, #88]	; (8000488 <CursorHome+0x6c>)
 8000430:	4b15      	ldr	r3, [pc, #84]	; (8000488 <CursorHome+0x6c>)
 8000432:	695b      	ldr	r3, [r3, #20]
 8000434:	f043 0302 	orr.w	r3, r3, #2
 8000438:	6153      	str	r3, [r2, #20]
	for (int k = 0; k < 100000; k++){}
 800043a:	2300      	movs	r3, #0
 800043c:	607b      	str	r3, [r7, #4]
 800043e:	e002      	b.n	8000446 <CursorHome+0x2a>
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	3301      	adds	r3, #1
 8000444:	607b      	str	r3, [r7, #4]
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	4a10      	ldr	r2, [pc, #64]	; (800048c <CursorHome+0x70>)
 800044a:	4293      	cmp	r3, r2
 800044c:	ddf8      	ble.n	8000440 <CursorHome+0x24>
	GPIOE->ODR |= BIT2;// enable 1 logique
 800044e:	4a10      	ldr	r2, [pc, #64]	; (8000490 <CursorHome+0x74>)
 8000450:	4b0f      	ldr	r3, [pc, #60]	; (8000490 <CursorHome+0x74>)
 8000452:	695b      	ldr	r3, [r3, #20]
 8000454:	f043 0304 	orr.w	r3, r3, #4
 8000458:	6153      	str	r3, [r2, #20]
	for (int k = 0; k < 100000; k++){}
 800045a:	2300      	movs	r3, #0
 800045c:	603b      	str	r3, [r7, #0]
 800045e:	e002      	b.n	8000466 <CursorHome+0x4a>
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	3301      	adds	r3, #1
 8000464:	603b      	str	r3, [r7, #0]
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	4a08      	ldr	r2, [pc, #32]	; (800048c <CursorHome+0x70>)
 800046a:	4293      	cmp	r3, r2
 800046c:	ddf8      	ble.n	8000460 <CursorHome+0x44>
	GPIOE->ODR &= ~(0xff);// enable 0 logique et remise a 0
 800046e:	4a08      	ldr	r2, [pc, #32]	; (8000490 <CursorHome+0x74>)
 8000470:	4b07      	ldr	r3, [pc, #28]	; (8000490 <CursorHome+0x74>)
 8000472:	695b      	ldr	r3, [r3, #20]
 8000474:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000478:	6153      	str	r3, [r2, #20]
}
 800047a:	bf00      	nop
 800047c:	370c      	adds	r7, #12
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	40020c00 	.word	0x40020c00
 800048c:	0001869f 	.word	0x0001869f
 8000490:	40021000 	.word	0x40021000

08000494 <WriteControl>:

void WriteControl(){// instructions pour initialiser le lcd
 8000494:	b480      	push	{r7}
 8000496:	b085      	sub	sp, #20
 8000498:	af00      	add	r7, sp, #0
	GPIOE->ODR &= ~(0xff);//RS=0;R/W=0;E=0
 800049a:	4a32      	ldr	r2, [pc, #200]	; (8000564 <WriteControl+0xd0>)
 800049c:	4b31      	ldr	r3, [pc, #196]	; (8000564 <WriteControl+0xd0>)
 800049e:	695b      	ldr	r3, [r3, #20]
 80004a0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80004a4:	6153      	str	r3, [r2, #20]
	GPIOD->ODR &= ~(0xff);
 80004a6:	4a30      	ldr	r2, [pc, #192]	; (8000568 <WriteControl+0xd4>)
 80004a8:	4b2f      	ldr	r3, [pc, #188]	; (8000568 <WriteControl+0xd4>)
 80004aa:	695b      	ldr	r3, [r3, #20]
 80004ac:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80004b0:	6153      	str	r3, [r2, #20]
	GPIOD->ODR |= (BIT3+BIT4+BIT5);//set on 8 bits 2 lines
 80004b2:	4a2d      	ldr	r2, [pc, #180]	; (8000568 <WriteControl+0xd4>)
 80004b4:	4b2c      	ldr	r3, [pc, #176]	; (8000568 <WriteControl+0xd4>)
 80004b6:	695b      	ldr	r3, [r3, #20]
 80004b8:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80004bc:	6153      	str	r3, [r2, #20]
	for (int k = 0; k < 100000; k++){}//4s
 80004be:	2300      	movs	r3, #0
 80004c0:	60fb      	str	r3, [r7, #12]
 80004c2:	e002      	b.n	80004ca <WriteControl+0x36>
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	3301      	adds	r3, #1
 80004c8:	60fb      	str	r3, [r7, #12]
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	4a27      	ldr	r2, [pc, #156]	; (800056c <WriteControl+0xd8>)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	ddf8      	ble.n	80004c4 <WriteControl+0x30>
	GPIOE->ODR |= BIT2;// enable 1 logique
 80004d2:	4a24      	ldr	r2, [pc, #144]	; (8000564 <WriteControl+0xd0>)
 80004d4:	4b23      	ldr	r3, [pc, #140]	; (8000564 <WriteControl+0xd0>)
 80004d6:	695b      	ldr	r3, [r3, #20]
 80004d8:	f043 0304 	orr.w	r3, r3, #4
 80004dc:	6153      	str	r3, [r2, #20]
	for (int k = 0; k < 100000; k++){}
 80004de:	2300      	movs	r3, #0
 80004e0:	60bb      	str	r3, [r7, #8]
 80004e2:	e002      	b.n	80004ea <WriteControl+0x56>
 80004e4:	68bb      	ldr	r3, [r7, #8]
 80004e6:	3301      	adds	r3, #1
 80004e8:	60bb      	str	r3, [r7, #8]
 80004ea:	68bb      	ldr	r3, [r7, #8]
 80004ec:	4a1f      	ldr	r2, [pc, #124]	; (800056c <WriteControl+0xd8>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	ddf8      	ble.n	80004e4 <WriteControl+0x50>
	GPIOE->ODR &= ~(0xff);// enable 0 logique et remise a 0
 80004f2:	4a1c      	ldr	r2, [pc, #112]	; (8000564 <WriteControl+0xd0>)
 80004f4:	4b1b      	ldr	r3, [pc, #108]	; (8000564 <WriteControl+0xd0>)
 80004f6:	695b      	ldr	r3, [r3, #20]
 80004f8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80004fc:	6153      	str	r3, [r2, #20]


	GPIOD->ODR &= ~(0xff);//remise a 0
 80004fe:	4a1a      	ldr	r2, [pc, #104]	; (8000568 <WriteControl+0xd4>)
 8000500:	4b19      	ldr	r3, [pc, #100]	; (8000568 <WriteControl+0xd4>)
 8000502:	695b      	ldr	r3, [r3, #20]
 8000504:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000508:	6153      	str	r3, [r2, #20]
	GPIOD->ODR |= (BIT1+BIT2+BIT3);//LCD on/off control
 800050a:	4a17      	ldr	r2, [pc, #92]	; (8000568 <WriteControl+0xd4>)
 800050c:	4b16      	ldr	r3, [pc, #88]	; (8000568 <WriteControl+0xd4>)
 800050e:	695b      	ldr	r3, [r3, #20]
 8000510:	f043 030e 	orr.w	r3, r3, #14
 8000514:	6153      	str	r3, [r2, #20]
	for (int k = 0; k < 100000; k++){}
 8000516:	2300      	movs	r3, #0
 8000518:	607b      	str	r3, [r7, #4]
 800051a:	e002      	b.n	8000522 <WriteControl+0x8e>
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	3301      	adds	r3, #1
 8000520:	607b      	str	r3, [r7, #4]
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	4a11      	ldr	r2, [pc, #68]	; (800056c <WriteControl+0xd8>)
 8000526:	4293      	cmp	r3, r2
 8000528:	ddf8      	ble.n	800051c <WriteControl+0x88>
	GPIOE->ODR |= BIT2;
 800052a:	4a0e      	ldr	r2, [pc, #56]	; (8000564 <WriteControl+0xd0>)
 800052c:	4b0d      	ldr	r3, [pc, #52]	; (8000564 <WriteControl+0xd0>)
 800052e:	695b      	ldr	r3, [r3, #20]
 8000530:	f043 0304 	orr.w	r3, r3, #4
 8000534:	6153      	str	r3, [r2, #20]
	for (int k = 0; k < 100000; k++){}
 8000536:	2300      	movs	r3, #0
 8000538:	603b      	str	r3, [r7, #0]
 800053a:	e002      	b.n	8000542 <WriteControl+0xae>
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	3301      	adds	r3, #1
 8000540:	603b      	str	r3, [r7, #0]
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	4a09      	ldr	r2, [pc, #36]	; (800056c <WriteControl+0xd8>)
 8000546:	4293      	cmp	r3, r2
 8000548:	ddf8      	ble.n	800053c <WriteControl+0xa8>
	GPIOE->ODR &= ~(0xff);
 800054a:	4a06      	ldr	r2, [pc, #24]	; (8000564 <WriteControl+0xd0>)
 800054c:	4b05      	ldr	r3, [pc, #20]	; (8000564 <WriteControl+0xd0>)
 800054e:	695b      	ldr	r3, [r3, #20]
 8000550:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000554:	6153      	str	r3, [r2, #20]


}
 8000556:	bf00      	nop
 8000558:	3714      	adds	r7, #20
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	40021000 	.word	0x40021000
 8000568:	40020c00 	.word	0x40020c00
 800056c:	0001869f 	.word	0x0001869f

08000570 <Gpio_key_Init>:


void Gpio_key_Init(){
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= BIT0 +BIT2 ;
 8000574:	4a11      	ldr	r2, [pc, #68]	; (80005bc <Gpio_key_Init+0x4c>)
 8000576:	4b11      	ldr	r3, [pc, #68]	; (80005bc <Gpio_key_Init+0x4c>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	f043 0305 	orr.w	r3, r3, #5
 800057e:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER |= (BIT0 + BIT2+ BIT4 + BIT6); //Mise sur output des pins PA0,PA1,PA2,PA3
 8000580:	4a0f      	ldr	r2, [pc, #60]	; (80005c0 <Gpio_key_Init+0x50>)
 8000582:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <Gpio_key_Init+0x50>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 800058a:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER |= BIT0+BIT1+BIT2+BIT3;//Mise en open dain des sorties
 800058c:	4a0c      	ldr	r2, [pc, #48]	; (80005c0 <Gpio_key_Init+0x50>)
 800058e:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <Gpio_key_Init+0x50>)
 8000590:	685b      	ldr	r3, [r3, #4]
 8000592:	f043 030f 	orr.w	r3, r3, #15
 8000596:	6053      	str	r3, [r2, #4]
	GPIOA->PUPDR |= (BIT0 + BIT2+ BIT4 + BIT6);//pull up des sorties PA0,PA1,PA2,PA3
 8000598:	4a09      	ldr	r2, [pc, #36]	; (80005c0 <Gpio_key_Init+0x50>)
 800059a:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <Gpio_key_Init+0x50>)
 800059c:	68db      	ldr	r3, [r3, #12]
 800059e:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 80005a2:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |= (BIT6 + BIT8+ BIT10+BIT12);//pull up des entrees PC4,...
 80005a4:	4a07      	ldr	r2, [pc, #28]	; (80005c4 <Gpio_key_Init+0x54>)
 80005a6:	4b07      	ldr	r3, [pc, #28]	; (80005c4 <Gpio_key_Init+0x54>)
 80005a8:	68db      	ldr	r3, [r3, #12]
 80005aa:	f443 53aa 	orr.w	r3, r3, #5440	; 0x1540
 80005ae:	60d3      	str	r3, [r2, #12]
	//GPIOD->MODER |= (BIT24|BIT26|BIT28|BIT30);//leds
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	40023800 	.word	0x40023800
 80005c0:	40020000 	.word	0x40020000
 80005c4:	40020800 	.word	0x40020800

080005c8 <configureAndStartSystick>:

void configureAndStartSystick(int p_freq){//hologe du processeur est 53.73Mhz, l'autre est 53.73Mhz/8
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	const int systick_clk = 53760000/8;// on doit utiliser l'horloge du processeur pour pouvoir utiliser des insterruptions(trop rapide)
 80005d0:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <configureAndStartSystick+0x3c>)
 80005d2:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD = systick_clk/p_freq;//on compte jusqu'a 1
 80005d4:	490c      	ldr	r1, [pc, #48]	; (8000608 <configureAndStartSystick+0x40>)
 80005d6:	68fa      	ldr	r2, [r7, #12]
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	fb92 f3f3 	sdiv	r3, r2, r3
 80005de:	604b      	str	r3, [r1, #4]
	SysTick->CTRL |= BIT0 |BIT1;//BIT0 pour Enable et BIT1 pour Enable SysTick exception request
 80005e0:	4a09      	ldr	r2, [pc, #36]	; (8000608 <configureAndStartSystick+0x40>)
 80005e2:	4b09      	ldr	r3, [pc, #36]	; (8000608 <configureAndStartSystick+0x40>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f043 0303 	orr.w	r3, r3, #3
 80005ea:	6013      	str	r3, [r2, #0]
	SysTick->VAL = systick_clk/p_freq;//lire ou ecrire en tout temps la valeur du compteur
 80005ec:	4906      	ldr	r1, [pc, #24]	; (8000608 <configureAndStartSystick+0x40>)
 80005ee:	68fa      	ldr	r2, [r7, #12]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80005f6:	608b      	str	r3, [r1, #8]
}
 80005f8:	bf00      	nop
 80005fa:	3714      	adds	r7, #20
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr
 8000604:	00668a00 	.word	0x00668a00
 8000608:	e000e010 	.word	0xe000e010

0800060c <main>:

int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
	volatile int compteurRetourDebutLaLigne = 0;//garde en memoire la position du curseur
 8000612:	2300      	movs	r3, #0
 8000614:	607b      	str	r3, [r7, #4]
	Gpio_key_Init();// init GPIO pour le keypad
 8000616:	f7ff ffab 	bl	8000570 <Gpio_key_Init>
	configureAndStartSystick(8);//frequence a laquelle on lit le clavier (10Hz)
 800061a:	2008      	movs	r0, #8
 800061c:	f7ff ffd4 	bl	80005c8 <configureAndStartSystick>
	configLCD();// GPIO pour le lcd
 8000620:	f7ff fdd2 	bl	80001c8 <configLCD>
	WriteControl();// instructions pour initialiser le lcd
 8000624:	f7ff ff36 	bl	8000494 <WriteControl>
	ClearLCD();
 8000628:	f7ff fe56 	bl	80002d8 <ClearLCD>
	CursorHome();
 800062c:	f7ff fef6 	bl	800041c <CursorHome>
	writeStringLCD("SMI_EE_WG                               ");
 8000630:	482d      	ldr	r0, [pc, #180]	; (80006e8 <main+0xdc>)
 8000632:	f7ff fed7 	bl	80003e4 <writeStringLCD>
  while(1){
	  if(NouvelleEcriture == 1){// si on appui sur quelquechose
 8000636:	4b2d      	ldr	r3, [pc, #180]	; (80006ec <main+0xe0>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2b01      	cmp	r3, #1
 800063c:	d14b      	bne.n	80006d6 <main+0xca>
		  if(c=='#'){ // si on appui sur #
 800063e:	4b2c      	ldr	r3, [pc, #176]	; (80006f0 <main+0xe4>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	b2db      	uxtb	r3, r3
 8000644:	2b23      	cmp	r3, #35	; 0x23
 8000646:	d111      	bne.n	800066c <main+0x60>
			  for(int k=0;k<compteurRetourDebutLaLigne;k++){CursorLeft();}//on met le curseur au debut de la ligne 2
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	e004      	b.n	8000658 <main+0x4c>
 800064e:	f7ff fddd 	bl	800020c <CursorLeft>
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	3301      	adds	r3, #1
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	68fa      	ldr	r2, [r7, #12]
 800065c:	429a      	cmp	r2, r3
 800065e:	dbf6      	blt.n	800064e <main+0x42>
			  writeStringLCD("                ");// on ecrit des espaces sur toute la ligne
 8000660:	4824      	ldr	r0, [pc, #144]	; (80006f4 <main+0xe8>)
 8000662:	f7ff febf 	bl	80003e4 <writeStringLCD>
			  compteurRetourDebutLaLigne = 16;// on indique qu'on est au bout de la ligne pour revenir au debut (voir le if ligne 214)
 8000666:	2310      	movs	r3, #16
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	e021      	b.n	80006b0 <main+0xa4>
		  }else if (cmpt < 3){// si on appui sur 2 ou 1 touche
 800066c:	4b22      	ldr	r3, [pc, #136]	; (80006f8 <main+0xec>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2b02      	cmp	r3, #2
 8000672:	dc1d      	bgt.n	80006b0 <main+0xa4>
			  writeByteLCD(c);// on ecrit la valeur du premier bouton appuye
 8000674:	4b1e      	ldr	r3, [pc, #120]	; (80006f0 <main+0xe4>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	b2db      	uxtb	r3, r3
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff fe6e 	bl	800035c <writeByteLCD>
			  if(cmpt > 1 && c2 != 'e' && compteurRetourDebutLaLigne < 15){// si on appui sur 2 touches en meme temps
 8000680:	4b1d      	ldr	r3, [pc, #116]	; (80006f8 <main+0xec>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2b01      	cmp	r3, #1
 8000686:	dd10      	ble.n	80006aa <main+0x9e>
 8000688:	4b1c      	ldr	r3, [pc, #112]	; (80006fc <main+0xf0>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	b2db      	uxtb	r3, r3
 800068e:	2b65      	cmp	r3, #101	; 0x65
 8000690:	d00b      	beq.n	80006aa <main+0x9e>
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	2b0e      	cmp	r3, #14
 8000696:	dc08      	bgt.n	80006aa <main+0x9e>
			  // la deuxieme condition est pour si la valeur de la deuxieme touche n a pas ete chargee dans c2
			  //La troisieme condition est pour savoir si on a la place d ecrire 2 caratere
				  writeByteLCD(c2);// on ecrit la valeur du deuxieme bouton appuye
 8000698:	4b18      	ldr	r3, [pc, #96]	; (80006fc <main+0xf0>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	4618      	mov	r0, r3
 80006a0:	f7ff fe5c 	bl	800035c <writeByteLCD>
				  compteurRetourDebutLaLigne +=1;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	3301      	adds	r3, #1
 80006a8:	607b      	str	r3, [r7, #4]
			  			  }
			  compteurRetourDebutLaLigne +=1;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	3301      	adds	r3, #1
 80006ae:	607b      	str	r3, [r7, #4]
		  }
		  cmpt = 0;
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <main+0xec>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
		  c2 = 'e';
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <main+0xf0>)
 80006b8:	2265      	movs	r2, #101	; 0x65
 80006ba:	701a      	strb	r2, [r3, #0]
		  for (int k = 0; k < 1000000; k++){}//anti rebonds
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	e002      	b.n	80006c8 <main+0xbc>
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	3301      	adds	r3, #1
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	4a0d      	ldr	r2, [pc, #52]	; (8000700 <main+0xf4>)
 80006cc:	4293      	cmp	r3, r2
 80006ce:	ddf8      	ble.n	80006c2 <main+0xb6>
		  NouvelleEcriture = 0;
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <main+0xe0>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
	  }
	  if(compteurRetourDebutLaLigne >= 16){// on est a la fin de la ligne
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2b0f      	cmp	r3, #15
 80006da:	ddac      	ble.n	8000636 <main+0x2a>
		  CursorStartLine();// on remet automatiquement le curseur au debut de la ligne
 80006dc:	f7ff fdd8 	bl	8000290 <CursorStartLine>
		  compteurRetourDebutLaLigne = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	607b      	str	r3, [r7, #4]
	  if(NouvelleEcriture == 1){// si on appui sur quelquechose
 80006e4:	e7a7      	b.n	8000636 <main+0x2a>
 80006e6:	bf00      	nop
 80006e8:	08000b6c 	.word	0x08000b6c
 80006ec:	20000024 	.word	0x20000024
 80006f0:	20000000 	.word	0x20000000
 80006f4:	08000b98 	.word	0x08000b98
 80006f8:	20000020 	.word	0x20000020
 80006fc:	20000001 	.word	0x20000001
 8000700:	000f423f 	.word	0x000f423f

08000704 <nouvEcriture>:
	  }
  }
}

void nouvEcriture(char n) {
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	71fb      	strb	r3, [r7, #7]
	if(cmpt == 0){// si on appui sur une touche
 800070e:	4b0f      	ldr	r3, [pc, #60]	; (800074c <nouvEcriture+0x48>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d103      	bne.n	800071e <nouvEcriture+0x1a>
		c = n;
 8000716:	4a0e      	ldr	r2, [pc, #56]	; (8000750 <nouvEcriture+0x4c>)
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	7013      	strb	r3, [r2, #0]
 800071c:	e008      	b.n	8000730 <nouvEcriture+0x2c>
	} else if (n != c) {// si on appui sur deux touches (deuxieme fois qu'on utilise nouvEcriture pour une autre touche)
 800071e:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <nouvEcriture+0x4c>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	b2db      	uxtb	r3, r3
 8000724:	79fa      	ldrb	r2, [r7, #7]
 8000726:	429a      	cmp	r2, r3
 8000728:	d002      	beq.n	8000730 <nouvEcriture+0x2c>
	c2 = n;
 800072a:	4a0a      	ldr	r2, [pc, #40]	; (8000754 <nouvEcriture+0x50>)
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	7013      	strb	r3, [r2, #0]
	}
	NouvelleEcriture = 1;
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <nouvEcriture+0x54>)
 8000732:	2201      	movs	r2, #1
 8000734:	601a      	str	r2, [r3, #0]
	cmpt++;
 8000736:	4b05      	ldr	r3, [pc, #20]	; (800074c <nouvEcriture+0x48>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	3301      	adds	r3, #1
 800073c:	4a03      	ldr	r2, [pc, #12]	; (800074c <nouvEcriture+0x48>)
 800073e:	6013      	str	r3, [r2, #0]
}
 8000740:	bf00      	nop
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	20000020 	.word	0x20000020
 8000750:	20000000 	.word	0x20000000
 8000754:	20000001 	.word	0x20000001
 8000758:	20000024 	.word	0x20000024

0800075c <SysTick_Handler>:

void SysTick_Handler(void) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
	cmpt = 0;// compte le nombre de touches appuyees
 8000762:	4b63      	ldr	r3, [pc, #396]	; (80008f0 <SysTick_Handler+0x194>)
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 5; i++) {
 8000768:	2300      	movs	r3, #0
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	e0b8      	b.n	80008e0 <SysTick_Handler+0x184>
	            // Activer la ligne i
	            GPIOA->ODR = ~(1 << i);
 800076e:	4a61      	ldr	r2, [pc, #388]	; (80008f4 <SysTick_Handler+0x198>)
 8000770:	2101      	movs	r1, #1
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	fa01 f303 	lsl.w	r3, r1, r3
 8000778:	43db      	mvns	r3, r3
 800077a:	6153      	str	r3, [r2, #20]

	            for (int k = 0; k < 1000; k++){}
 800077c:	2300      	movs	r3, #0
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	e002      	b.n	8000788 <SysTick_Handler+0x2c>
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	3301      	adds	r3, #1
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800078e:	dbf8      	blt.n	8000782 <SysTick_Handler+0x26>

	            	if(GPIOA->ODR== 0xfffe){// Lire la rang�e 1
 8000790:	4b58      	ldr	r3, [pc, #352]	; (80008f4 <SysTick_Handler+0x198>)
 8000792:	695b      	ldr	r3, [r3, #20]
 8000794:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000798:	4293      	cmp	r3, r2
 800079a:	d120      	bne.n	80007de <SysTick_Handler+0x82>
	            		if ((GPIOC->IDR | (BIT5|BIT6)) == 0xffef) {// Lire la colonne 1 de la rang�e 1, "| (BIT5|BIT6)" pour forcer les bits qui nous interessent pas a 1
 800079c:	4b56      	ldr	r3, [pc, #344]	; (80008f8 <SysTick_Handler+0x19c>)
 800079e:	691b      	ldr	r3, [r3, #16]
 80007a0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80007a4:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d102      	bne.n	80007b2 <SysTick_Handler+0x56>
	            			nouvEcriture('1');
 80007ac:	2031      	movs	r0, #49	; 0x31
 80007ae:	f7ff ffa9 	bl	8000704 <nouvEcriture>
	            		}
	            		if ((GPIOC->IDR | (BIT4|BIT6))==0xffdf) {// Lire la colonne 2 de la rang�e 1
 80007b2:	4b51      	ldr	r3, [pc, #324]	; (80008f8 <SysTick_Handler+0x19c>)
 80007b4:	691b      	ldr	r3, [r3, #16]
 80007b6:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80007ba:	f64f 72df 	movw	r2, #65503	; 0xffdf
 80007be:	4293      	cmp	r3, r2
 80007c0:	d102      	bne.n	80007c8 <SysTick_Handler+0x6c>
	            			nouvEcriture('2');
 80007c2:	2032      	movs	r0, #50	; 0x32
 80007c4:	f7ff ff9e 	bl	8000704 <nouvEcriture>
	            		}
	            		if ((GPIOC->IDR | (BIT4|BIT5))==0xffbf) {// Lire la colonne 3 de la rang�e 1
 80007c8:	4b4b      	ldr	r3, [pc, #300]	; (80008f8 <SysTick_Handler+0x19c>)
 80007ca:	691b      	ldr	r3, [r3, #16]
 80007cc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80007d0:	f64f 72bf 	movw	r2, #65471	; 0xffbf
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d102      	bne.n	80007de <SysTick_Handler+0x82>
	            			nouvEcriture('3');
 80007d8:	2033      	movs	r0, #51	; 0x33
 80007da:	f7ff ff93 	bl	8000704 <nouvEcriture>
	            		}
	            	}
	            	if(GPIOA->ODR == 0xfffd){//Lire la rangee 2
 80007de:	4b45      	ldr	r3, [pc, #276]	; (80008f4 <SysTick_Handler+0x198>)
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d120      	bne.n	800082c <SysTick_Handler+0xd0>
	            		if ((GPIOC->IDR | (BIT5|BIT6))==0xffef) {
 80007ea:	4b43      	ldr	r3, [pc, #268]	; (80008f8 <SysTick_Handler+0x19c>)
 80007ec:	691b      	ldr	r3, [r3, #16]
 80007ee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80007f2:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d102      	bne.n	8000800 <SysTick_Handler+0xa4>
	            			nouvEcriture('4');
 80007fa:	2034      	movs	r0, #52	; 0x34
 80007fc:	f7ff ff82 	bl	8000704 <nouvEcriture>
	            		}
	            		if ((GPIOC->IDR | (BIT4|BIT6))==0xffdf) {
 8000800:	4b3d      	ldr	r3, [pc, #244]	; (80008f8 <SysTick_Handler+0x19c>)
 8000802:	691b      	ldr	r3, [r3, #16]
 8000804:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000808:	f64f 72df 	movw	r2, #65503	; 0xffdf
 800080c:	4293      	cmp	r3, r2
 800080e:	d102      	bne.n	8000816 <SysTick_Handler+0xba>
	            			nouvEcriture('5');
 8000810:	2035      	movs	r0, #53	; 0x35
 8000812:	f7ff ff77 	bl	8000704 <nouvEcriture>
	            		}
	            		if ((GPIOC->IDR | (BIT4|BIT5))==0xffbf) {
 8000816:	4b38      	ldr	r3, [pc, #224]	; (80008f8 <SysTick_Handler+0x19c>)
 8000818:	691b      	ldr	r3, [r3, #16]
 800081a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800081e:	f64f 72bf 	movw	r2, #65471	; 0xffbf
 8000822:	4293      	cmp	r3, r2
 8000824:	d102      	bne.n	800082c <SysTick_Handler+0xd0>
	            			nouvEcriture('6');
 8000826:	2036      	movs	r0, #54	; 0x36
 8000828:	f7ff ff6c 	bl	8000704 <nouvEcriture>
	            		}
	            	}
	            	if(GPIOA->ODR == 0xfffb){
 800082c:	4b31      	ldr	r3, [pc, #196]	; (80008f4 <SysTick_Handler+0x198>)
 800082e:	695b      	ldr	r3, [r3, #20]
 8000830:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 8000834:	4293      	cmp	r3, r2
 8000836:	d120      	bne.n	800087a <SysTick_Handler+0x11e>
	            		if ((GPIOC->IDR | (BIT5|BIT6)) ==0xffef) {
 8000838:	4b2f      	ldr	r3, [pc, #188]	; (80008f8 <SysTick_Handler+0x19c>)
 800083a:	691b      	ldr	r3, [r3, #16]
 800083c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000840:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8000844:	4293      	cmp	r3, r2
 8000846:	d102      	bne.n	800084e <SysTick_Handler+0xf2>
	            			nouvEcriture('7');
 8000848:	2037      	movs	r0, #55	; 0x37
 800084a:	f7ff ff5b 	bl	8000704 <nouvEcriture>
	            		}
	            		if ((GPIOC->IDR | (BIT4|BIT6)) ==0xffdf) {
 800084e:	4b2a      	ldr	r3, [pc, #168]	; (80008f8 <SysTick_Handler+0x19c>)
 8000850:	691b      	ldr	r3, [r3, #16]
 8000852:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000856:	f64f 72df 	movw	r2, #65503	; 0xffdf
 800085a:	4293      	cmp	r3, r2
 800085c:	d102      	bne.n	8000864 <SysTick_Handler+0x108>
	            			nouvEcriture('8');
 800085e:	2038      	movs	r0, #56	; 0x38
 8000860:	f7ff ff50 	bl	8000704 <nouvEcriture>
	            		}
	            		if ((GPIOC->IDR | (BIT4|BIT5)) ==0xffbf) {
 8000864:	4b24      	ldr	r3, [pc, #144]	; (80008f8 <SysTick_Handler+0x19c>)
 8000866:	691b      	ldr	r3, [r3, #16]
 8000868:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800086c:	f64f 72bf 	movw	r2, #65471	; 0xffbf
 8000870:	4293      	cmp	r3, r2
 8000872:	d102      	bne.n	800087a <SysTick_Handler+0x11e>
	            			nouvEcriture('9');
 8000874:	2039      	movs	r0, #57	; 0x39
 8000876:	f7ff ff45 	bl	8000704 <nouvEcriture>
	            		}
	            	}
	            	if(GPIOA->ODR == 0xfff7){
 800087a:	4b1e      	ldr	r3, [pc, #120]	; (80008f4 <SysTick_Handler+0x198>)
 800087c:	695b      	ldr	r3, [r3, #20]
 800087e:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8000882:	4293      	cmp	r3, r2
 8000884:	d123      	bne.n	80008ce <SysTick_Handler+0x172>
	            		if ((GPIOC->IDR | (BIT5|BIT6)) ==0xffef) {
 8000886:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <SysTick_Handler+0x19c>)
 8000888:	691b      	ldr	r3, [r3, #16]
 800088a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800088e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8000892:	4293      	cmp	r3, r2
 8000894:	d102      	bne.n	800089c <SysTick_Handler+0x140>
	            			nouvEcriture('*');
 8000896:	202a      	movs	r0, #42	; 0x2a
 8000898:	f7ff ff34 	bl	8000704 <nouvEcriture>
	            		}
	            		if ((GPIOC->IDR | (BIT4|BIT6))==0xffdf) {
 800089c:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <SysTick_Handler+0x19c>)
 800089e:	691b      	ldr	r3, [r3, #16]
 80008a0:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80008a4:	f64f 72df 	movw	r2, #65503	; 0xffdf
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d102      	bne.n	80008b2 <SysTick_Handler+0x156>
	            			nouvEcriture('0');
 80008ac:	2030      	movs	r0, #48	; 0x30
 80008ae:	f7ff ff29 	bl	8000704 <nouvEcriture>
	            		}
	            		if ((GPIOC->IDR | (BIT4|BIT5))==0xffbf) {
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <SysTick_Handler+0x19c>)
 80008b4:	691b      	ldr	r3, [r3, #16]
 80008b6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80008ba:	f64f 72bf 	movw	r2, #65471	; 0xffbf
 80008be:	4293      	cmp	r3, r2
 80008c0:	d105      	bne.n	80008ce <SysTick_Handler+0x172>

	            			c = '#';
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <SysTick_Handler+0x1a0>)
 80008c4:	2223      	movs	r2, #35	; 0x23
 80008c6:	701a      	strb	r2, [r3, #0]
	            			NouvelleEcriture = 1;
 80008c8:	4b0d      	ldr	r3, [pc, #52]	; (8000900 <SysTick_Handler+0x1a4>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	601a      	str	r2, [r3, #0]
	            		}
	            	}
	            // D�sactiver la ligne i
	            GPIOA->ODR = (1 << i); // Met le bit i � 0
 80008ce:	4a09      	ldr	r2, [pc, #36]	; (80008f4 <SysTick_Handler+0x198>)
 80008d0:	2101      	movs	r1, #1
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	fa01 f303 	lsl.w	r3, r1, r3
 80008d8:	6153      	str	r3, [r2, #20]
	for (int i = 0; i < 5; i++) {
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	3301      	adds	r3, #1
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2b04      	cmp	r3, #4
 80008e4:	f77f af43 	ble.w	800076e <SysTick_Handler+0x12>
	}
}
 80008e8:	bf00      	nop
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000020 	.word	0x20000020
 80008f4:	40020000 	.word	0x40020000
 80008f8:	40020800 	.word	0x40020800
 80008fc:	20000000 	.word	0x20000000
 8000900:	20000024 	.word	0x20000024

08000904 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000904:	f8df d034 	ldr.w	sp, [pc, #52]	; 800093c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000908:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800090a:	e003      	b.n	8000914 <LoopCopyDataInit>

0800090c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800090e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000910:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000912:	3104      	adds	r1, #4

08000914 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000914:	480b      	ldr	r0, [pc, #44]	; (8000944 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000916:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000918:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800091a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800091c:	d3f6      	bcc.n	800090c <CopyDataInit>
  ldr  r2, =_sbss
 800091e:	4a0b      	ldr	r2, [pc, #44]	; (800094c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000920:	e002      	b.n	8000928 <LoopFillZerobss>

08000922 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000922:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000924:	f842 3b04 	str.w	r3, [r2], #4

08000928 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800092a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800092c:	d3f9      	bcc.n	8000922 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800092e:	f000 f83b 	bl	80009a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000932:	f000 f8eb 	bl	8000b0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000936:	f7ff fe69 	bl	800060c <main>
  bx  lr    
 800093a:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800093c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000940:	08000bb4 	.word	0x08000bb4
  ldr  r0, =_sdata
 8000944:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000948:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 800094c:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8000950:	20000028 	.word	0x20000028

08000954 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000954:	e7fe      	b.n	8000954 <ADC_IRQHandler>

08000956 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000968:	e7fe      	b.n	8000968 <HardFault_Handler+0x4>

0800096a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800096e:	e7fe      	b.n	800096e <MemManage_Handler+0x4>

08000970 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000974:	e7fe      	b.n	8000974 <BusFault_Handler+0x4>

08000976 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800097a:	e7fe      	b.n	800097a <UsageFault_Handler+0x4>

0800097c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
	...

080009a8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009ac:	4a16      	ldr	r2, [pc, #88]	; (8000a08 <SystemInit+0x60>)
 80009ae:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <SystemInit+0x60>)
 80009b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80009bc:	4a13      	ldr	r2, [pc, #76]	; (8000a0c <SystemInit+0x64>)
 80009be:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <SystemInit+0x64>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f043 0301 	orr.w	r3, r3, #1
 80009c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80009c8:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <SystemInit+0x64>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80009ce:	4a0f      	ldr	r2, [pc, #60]	; (8000a0c <SystemInit+0x64>)
 80009d0:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <SystemInit+0x64>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80009d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009dc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80009de:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <SystemInit+0x64>)
 80009e0:	4a0b      	ldr	r2, [pc, #44]	; (8000a10 <SystemInit+0x68>)
 80009e2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80009e4:	4a09      	ldr	r2, [pc, #36]	; (8000a0c <SystemInit+0x64>)
 80009e6:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <SystemInit+0x64>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009ee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <SystemInit+0x64>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80009f6:	f000 f80d 	bl	8000a14 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009fa:	4b03      	ldr	r3, [pc, #12]	; (8000a08 <SystemInit+0x60>)
 80009fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a00:	609a      	str	r2, [r3, #8]
#endif
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	e000ed00 	.word	0xe000ed00
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	24003010 	.word	0x24003010

08000a14 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	2300      	movs	r3, #0
 8000a20:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000a22:	4a36      	ldr	r2, [pc, #216]	; (8000afc <SetSysClock+0xe8>)
 8000a24:	4b35      	ldr	r3, [pc, #212]	; (8000afc <SetSysClock+0xe8>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a2c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000a2e:	4b33      	ldr	r3, [pc, #204]	; (8000afc <SetSysClock+0xe8>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a36:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d103      	bne.n	8000a4c <SetSysClock+0x38>
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000a4a:	d1f0      	bne.n	8000a2e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000a4c:	4b2b      	ldr	r3, [pc, #172]	; (8000afc <SetSysClock+0xe8>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d002      	beq.n	8000a5e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	e001      	b.n	8000a62 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d142      	bne.n	8000aee <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000a68:	4a24      	ldr	r2, [pc, #144]	; (8000afc <SetSysClock+0xe8>)
 8000a6a:	4b24      	ldr	r3, [pc, #144]	; (8000afc <SetSysClock+0xe8>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a72:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000a74:	4a22      	ldr	r2, [pc, #136]	; (8000b00 <SetSysClock+0xec>)
 8000a76:	4b22      	ldr	r3, [pc, #136]	; (8000b00 <SetSysClock+0xec>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a7e:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000a80:	4a1e      	ldr	r2, [pc, #120]	; (8000afc <SetSysClock+0xe8>)
 8000a82:	4b1e      	ldr	r3, [pc, #120]	; (8000afc <SetSysClock+0xe8>)
 8000a84:	689b      	ldr	r3, [r3, #8]
 8000a86:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000a88:	4a1c      	ldr	r2, [pc, #112]	; (8000afc <SetSysClock+0xe8>)
 8000a8a:	4b1c      	ldr	r3, [pc, #112]	; (8000afc <SetSysClock+0xe8>)
 8000a8c:	689b      	ldr	r3, [r3, #8]
 8000a8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a92:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000a94:	4a19      	ldr	r2, [pc, #100]	; (8000afc <SetSysClock+0xe8>)
 8000a96:	4b19      	ldr	r3, [pc, #100]	; (8000afc <SetSysClock+0xe8>)
 8000a98:	689b      	ldr	r3, [r3, #8]
 8000a9a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000a9e:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000aa0:	4b16      	ldr	r3, [pc, #88]	; (8000afc <SetSysClock+0xe8>)
 8000aa2:	4a18      	ldr	r2, [pc, #96]	; (8000b04 <SetSysClock+0xf0>)
 8000aa4:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000aa6:	4a15      	ldr	r2, [pc, #84]	; (8000afc <SetSysClock+0xe8>)
 8000aa8:	4b14      	ldr	r3, [pc, #80]	; (8000afc <SetSysClock+0xe8>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ab0:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000ab2:	bf00      	nop
 8000ab4:	4b11      	ldr	r3, [pc, #68]	; (8000afc <SetSysClock+0xe8>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d0f9      	beq.n	8000ab4 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000ac0:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <SetSysClock+0xf4>)
 8000ac2:	f240 7205 	movw	r2, #1797	; 0x705
 8000ac6:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000ac8:	4a0c      	ldr	r2, [pc, #48]	; (8000afc <SetSysClock+0xe8>)
 8000aca:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <SetSysClock+0xe8>)
 8000acc:	689b      	ldr	r3, [r3, #8]
 8000ace:	f023 0303 	bic.w	r3, r3, #3
 8000ad2:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000ad4:	4a09      	ldr	r2, [pc, #36]	; (8000afc <SetSysClock+0xe8>)
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <SetSysClock+0xe8>)
 8000ad8:	689b      	ldr	r3, [r3, #8]
 8000ada:	f043 0302 	orr.w	r3, r3, #2
 8000ade:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000ae0:	bf00      	nop
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <SetSysClock+0xe8>)
 8000ae4:	689b      	ldr	r3, [r3, #8]
 8000ae6:	f003 030c 	and.w	r3, r3, #12
 8000aea:	2b08      	cmp	r3, #8
 8000aec:	d1f9      	bne.n	8000ae2 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40007000 	.word	0x40007000
 8000b04:	07405419 	.word	0x07405419
 8000b08:	40023c00 	.word	0x40023c00

08000b0c <__libc_init_array>:
 8000b0c:	b570      	push	{r4, r5, r6, lr}
 8000b0e:	4e0d      	ldr	r6, [pc, #52]	; (8000b44 <__libc_init_array+0x38>)
 8000b10:	4c0d      	ldr	r4, [pc, #52]	; (8000b48 <__libc_init_array+0x3c>)
 8000b12:	1ba4      	subs	r4, r4, r6
 8000b14:	10a4      	asrs	r4, r4, #2
 8000b16:	2500      	movs	r5, #0
 8000b18:	42a5      	cmp	r5, r4
 8000b1a:	d109      	bne.n	8000b30 <__libc_init_array+0x24>
 8000b1c:	4e0b      	ldr	r6, [pc, #44]	; (8000b4c <__libc_init_array+0x40>)
 8000b1e:	4c0c      	ldr	r4, [pc, #48]	; (8000b50 <__libc_init_array+0x44>)
 8000b20:	f000 f818 	bl	8000b54 <_init>
 8000b24:	1ba4      	subs	r4, r4, r6
 8000b26:	10a4      	asrs	r4, r4, #2
 8000b28:	2500      	movs	r5, #0
 8000b2a:	42a5      	cmp	r5, r4
 8000b2c:	d105      	bne.n	8000b3a <__libc_init_array+0x2e>
 8000b2e:	bd70      	pop	{r4, r5, r6, pc}
 8000b30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b34:	4798      	blx	r3
 8000b36:	3501      	adds	r5, #1
 8000b38:	e7ee      	b.n	8000b18 <__libc_init_array+0xc>
 8000b3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b3e:	4798      	blx	r3
 8000b40:	3501      	adds	r5, #1
 8000b42:	e7f2      	b.n	8000b2a <__libc_init_array+0x1e>
 8000b44:	08000bac 	.word	0x08000bac
 8000b48:	08000bac 	.word	0x08000bac
 8000b4c:	08000bac 	.word	0x08000bac
 8000b50:	08000bb0 	.word	0x08000bb0

08000b54 <_init>:
 8000b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b56:	bf00      	nop
 8000b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b5a:	bc08      	pop	{r3}
 8000b5c:	469e      	mov	lr, r3
 8000b5e:	4770      	bx	lr

08000b60 <_fini>:
 8000b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b62:	bf00      	nop
 8000b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b66:	bc08      	pop	{r3}
 8000b68:	469e      	mov	lr, r3
 8000b6a:	4770      	bx	lr


DACtest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000044c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005d4  080005dc  000105dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080005d4  080005d4  000105d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080005d8  080005d8  000105d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  000105dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000105dc  2**0
                  CONTENTS
  7 .bss          00000020  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000020  20000020  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000105dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00000d04  00000000  00000000  0001060c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000031f  00000000  00000000  00011310  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000108  00000000  00000000  00011630  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000d0  00000000  00000000  00011738  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00000701  00000000  00000000  00011808  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000056f  00000000  00000000  00011f09  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00012478  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000002b4  00000000  00000000  000124f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  000127a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080005bc 	.word	0x080005bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080005bc 	.word	0x080005bc

080001c8 <ADC_config>:

#include "stm32f4xx.h"
//#include "macros_utiles.h"

void ADC_config (void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	6. Set the Regular channel sequence length in ADC_SQR1
	7. Set the Respective GPIO PINs in the Analog Mode
	************************************************/

//1. Enable ADC and GPIO clock
	RCC->APB2ENR |= (1<<8);  // enable ADC1 clock
 80001cc:	4a26      	ldr	r2, [pc, #152]	; (8000268 <ADC_config+0xa0>)
 80001ce:	4b26      	ldr	r3, [pc, #152]	; (8000268 <ADC_config+0xa0>)
 80001d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80001d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80001d6:	6453      	str	r3, [r2, #68]	; 0x44
	RCC->AHB1ENR |= (1<<0);  // enable GPIOA clock
 80001d8:	4a23      	ldr	r2, [pc, #140]	; (8000268 <ADC_config+0xa0>)
 80001da:	4b23      	ldr	r3, [pc, #140]	; (8000268 <ADC_config+0xa0>)
 80001dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001de:	f043 0301 	orr.w	r3, r3, #1
 80001e2:	6313      	str	r3, [r2, #48]	; 0x30

//2. Set the prescalar in the Common Control Register (CCR)
	ADC->CCR |= 1<<16;  		 // PCLK2 divide by 4
 80001e4:	4a21      	ldr	r2, [pc, #132]	; (800026c <ADC_config+0xa4>)
 80001e6:	4b21      	ldr	r3, [pc, #132]	; (800026c <ADC_config+0xa4>)
 80001e8:	685b      	ldr	r3, [r3, #4]
 80001ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001ee:	6053      	str	r3, [r2, #4]

//3. Set the Scan Mode and Resolution in the Control Register 1 (CR1)
	ADC1->CR1 = (1<<8);    // SCAN mode enabled
 80001f0:	4b1f      	ldr	r3, [pc, #124]	; (8000270 <ADC_config+0xa8>)
 80001f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001f6:	605a      	str	r2, [r3, #4]
	ADC1->CR1 &= ~(1<<24);   // 12 bit RES
 80001f8:	4a1d      	ldr	r2, [pc, #116]	; (8000270 <ADC_config+0xa8>)
 80001fa:	4b1d      	ldr	r3, [pc, #116]	; (8000270 <ADC_config+0xa8>)
 80001fc:	685b      	ldr	r3, [r3, #4]
 80001fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000202:	6053      	str	r3, [r2, #4]

//4. Set the Continuous Conversion, EOC, and Data Alignment in Control Reg 2 (CR2)
	ADC1->CR2 |= (1<<1);     // enable continuous conversion mode
 8000204:	4a1a      	ldr	r2, [pc, #104]	; (8000270 <ADC_config+0xa8>)
 8000206:	4b1a      	ldr	r3, [pc, #104]	; (8000270 <ADC_config+0xa8>)
 8000208:	689b      	ldr	r3, [r3, #8]
 800020a:	f043 0302 	orr.w	r3, r3, #2
 800020e:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= (1<<10);    // EOC after each conversion
 8000210:	4a17      	ldr	r2, [pc, #92]	; (8000270 <ADC_config+0xa8>)
 8000212:	4b17      	ldr	r3, [pc, #92]	; (8000270 <ADC_config+0xa8>)
 8000214:	689b      	ldr	r3, [r3, #8]
 8000216:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800021a:	6093      	str	r3, [r2, #8]
	ADC1->CR2 &= ~(1<<11);   // Data Alignment RIGHT
 800021c:	4a14      	ldr	r2, [pc, #80]	; (8000270 <ADC_config+0xa8>)
 800021e:	4b14      	ldr	r3, [pc, #80]	; (8000270 <ADC_config+0xa8>)
 8000220:	689b      	ldr	r3, [r3, #8]
 8000222:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000226:	6093      	str	r3, [r2, #8]

//5. Set the Sampling Time for the channels
	ADC1->SMPR2 &= ~((1<<3) | (1<<12));  // Sampling time of 3 cycles for channel 1 and channel 4
 8000228:	4a11      	ldr	r2, [pc, #68]	; (8000270 <ADC_config+0xa8>)
 800022a:	4b11      	ldr	r3, [pc, #68]	; (8000270 <ADC_config+0xa8>)
 800022c:	691b      	ldr	r3, [r3, #16]
 800022e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000232:	f023 0308 	bic.w	r3, r3, #8
 8000236:	6113      	str	r3, [r2, #16]

//6. Set the Regular channel sequence length in ADC_SQR1
	ADC1->SQR1 |= (1<<20);   // SQR1_L =1 for 2 conversions
 8000238:	4a0d      	ldr	r2, [pc, #52]	; (8000270 <ADC_config+0xa8>)
 800023a:	4b0d      	ldr	r3, [pc, #52]	; (8000270 <ADC_config+0xa8>)
 800023c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800023e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000242:	62d3      	str	r3, [r2, #44]	; 0x2c

//7. Set the Respective GPIO PINs in the Analog Mode
	GPIOA->MODER |= (3<<2);  // analog mode for PA 1 (chennel 1)
 8000244:	4a0b      	ldr	r2, [pc, #44]	; (8000274 <ADC_config+0xac>)
 8000246:	4b0b      	ldr	r3, [pc, #44]	; (8000274 <ADC_config+0xac>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f043 030c 	orr.w	r3, r3, #12
 800024e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (3<<8);  // analog mode for PA 4 (channel 4)
 8000250:	4a08      	ldr	r2, [pc, #32]	; (8000274 <ADC_config+0xac>)
 8000252:	4b08      	ldr	r3, [pc, #32]	; (8000274 <ADC_config+0xac>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800025a:	6013      	str	r3, [r2, #0]
}
 800025c:	bf00      	nop
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	40023800 	.word	0x40023800
 800026c:	40012300 	.word	0x40012300
 8000270:	40012000 	.word	0x40012000
 8000274:	40020000 	.word	0x40020000

08000278 <ADC_Enable>:


void ADC_Enable (void)
{
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
	/************** STEPS TO FOLLOW *****************
	1. Enable the ADC by setting ADON bit in CR2
	2. Wait for ADC to stabilize (approx 10us)
	************************************************/
	ADC1->CR2 |= 1<<0;   // ADON =1 enable ADC1
 800027e:	4a0a      	ldr	r2, [pc, #40]	; (80002a8 <ADC_Enable+0x30>)
 8000280:	4b09      	ldr	r3, [pc, #36]	; (80002a8 <ADC_Enable+0x30>)
 8000282:	689b      	ldr	r3, [r3, #8]
 8000284:	f043 0301 	orr.w	r3, r3, #1
 8000288:	6093      	str	r3, [r2, #8]

	uint32_t delay = 10000;
 800028a:	f242 7310 	movw	r3, #10000	; 0x2710
 800028e:	607b      	str	r3, [r7, #4]
	while (delay--);
 8000290:	bf00      	nop
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	1e5a      	subs	r2, r3, #1
 8000296:	607a      	str	r2, [r7, #4]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d1fa      	bne.n	8000292 <ADC_Enable+0x1a>
}
 800029c:	bf00      	nop
 800029e:	370c      	adds	r7, #12
 80002a0:	46bd      	mov	sp, r7
 80002a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a6:	4770      	bx	lr
 80002a8:	40012000 	.word	0x40012000

080002ac <ADC_Start>:


void ADC_Start (int channel)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]


/**	Since we will be polling for each channel, here we will keep one channel in the sequence at a time
		ADC1->SQR3 |= (channel<<0); will just keep the respective channel in the sequence for the conversion **/

	ADC1->SQR3 = 0;
 80002b4:	4b0b      	ldr	r3, [pc, #44]	; (80002e4 <ADC_Start+0x38>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	635a      	str	r2, [r3, #52]	; 0x34
	ADC1->SQR3 |= (channel<<0);    // conversion in regular sequence
 80002ba:	490a      	ldr	r1, [pc, #40]	; (80002e4 <ADC_Start+0x38>)
 80002bc:	4b09      	ldr	r3, [pc, #36]	; (80002e4 <ADC_Start+0x38>)
 80002be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	4313      	orrs	r3, r2
 80002c4:	634b      	str	r3, [r1, #52]	; 0x34

	ADC1->SR = 0;        // clear the status register
 80002c6:	4b07      	ldr	r3, [pc, #28]	; (80002e4 <ADC_Start+0x38>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	601a      	str	r2, [r3, #0]

	ADC1->CR2 |= (1<<30);  // start the conversion
 80002cc:	4a05      	ldr	r2, [pc, #20]	; (80002e4 <ADC_Start+0x38>)
 80002ce:	4b05      	ldr	r3, [pc, #20]	; (80002e4 <ADC_Start+0x38>)
 80002d0:	689b      	ldr	r3, [r3, #8]
 80002d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80002d6:	6093      	str	r3, [r2, #8]
}
 80002d8:	bf00      	nop
 80002da:	370c      	adds	r7, #12
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr
 80002e4:	40012000 	.word	0x40012000

080002e8 <ADC_WaitForConv>:


void ADC_WaitForConv (void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
	/*************************************************
	EOC Flag will be set, once the conversion is finished
	*************************************************/
	while (!(ADC1->SR & (1<<1)));  // wait for EOC flag to set
 80002ec:	bf00      	nop
 80002ee:	4b05      	ldr	r3, [pc, #20]	; (8000304 <ADC_WaitForConv+0x1c>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	f003 0302 	and.w	r3, r3, #2
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d0f9      	beq.n	80002ee <ADC_WaitForConv+0x6>
}
 80002fa:	bf00      	nop
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr
 8000304:	40012000 	.word	0x40012000

08000308 <ADC_GetVal>:

uint16_t ADC_GetVal (void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
	return ADC1->DR;  // Read the Data Register
 800030c:	4b03      	ldr	r3, [pc, #12]	; (800031c <ADC_GetVal+0x14>)
 800030e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000310:	b29b      	uxth	r3, r3
}
 8000312:	4618      	mov	r0, r3
 8000314:	46bd      	mov	sp, r7
 8000316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031a:	4770      	bx	lr
 800031c:	40012000 	.word	0x40012000

08000320 <main>:
uint16_t ADC_VAL[2] = {0,0};



int main ()
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0

	ADC_config ();
 8000324:	f7ff ff50 	bl	80001c8 <ADC_config>
	ADC_Enable ();
 8000328:	f7ff ffa6 	bl	8000278 <ADC_Enable>

	while (1)
	{
		ADC_Start (1);
 800032c:	2001      	movs	r0, #1
 800032e:	f7ff ffbd 	bl	80002ac <ADC_Start>
		ADC_WaitForConv ();
 8000332:	f7ff ffd9 	bl	80002e8 <ADC_WaitForConv>
		ADC_VAL[0] = ADC_GetVal();
 8000336:	f7ff ffe7 	bl	8000308 <ADC_GetVal>
 800033a:	4603      	mov	r3, r0
 800033c:	461a      	mov	r2, r3
 800033e:	4b07      	ldr	r3, [pc, #28]	; (800035c <main+0x3c>)
 8000340:	801a      	strh	r2, [r3, #0]


		ADC_Start (4);
 8000342:	2004      	movs	r0, #4
 8000344:	f7ff ffb2 	bl	80002ac <ADC_Start>
		ADC_WaitForConv ();
 8000348:	f7ff ffce 	bl	80002e8 <ADC_WaitForConv>
		ADC_VAL[1] = ADC_GetVal();
 800034c:	f7ff ffdc 	bl	8000308 <ADC_GetVal>
 8000350:	4603      	mov	r3, r0
 8000352:	461a      	mov	r2, r3
 8000354:	4b01      	ldr	r3, [pc, #4]	; (800035c <main+0x3c>)
 8000356:	805a      	strh	r2, [r3, #2]
		ADC_Start (1);
 8000358:	e7e8      	b.n	800032c <main+0xc>
 800035a:	bf00      	nop
 800035c:	2000001c 	.word	0x2000001c

08000360 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000360:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000398 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000364:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000366:	e003      	b.n	8000370 <LoopCopyDataInit>

08000368 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000368:	4b0c      	ldr	r3, [pc, #48]	; (800039c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800036a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800036c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800036e:	3104      	adds	r1, #4

08000370 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000370:	480b      	ldr	r0, [pc, #44]	; (80003a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000372:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000374:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000376:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000378:	d3f6      	bcc.n	8000368 <CopyDataInit>
  ldr  r2, =_sbss
 800037a:	4a0b      	ldr	r2, [pc, #44]	; (80003a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800037c:	e002      	b.n	8000384 <LoopFillZerobss>

0800037e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800037e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000380:	f842 3b04 	str.w	r3, [r2], #4

08000384 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000384:	4b09      	ldr	r3, [pc, #36]	; (80003ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000386:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000388:	d3f9      	bcc.n	800037e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800038a:	f000 f841 	bl	8000410 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800038e:	f000 f8f1 	bl	8000574 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000392:	f7ff ffc5 	bl	8000320 <main>
  bx  lr    
 8000396:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000398:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800039c:	080005dc 	.word	0x080005dc
  ldr  r0, =_sdata
 80003a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80003a4:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 80003a8:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 80003ac:	20000020 	.word	0x20000020

080003b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003b0:	e7fe      	b.n	80003b0 <ADC_IRQHandler>

080003b2 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80003b2:	b480      	push	{r7}
 80003b4:	af00      	add	r7, sp, #0
}
 80003b6:	bf00      	nop
 80003b8:	46bd      	mov	sp, r7
 80003ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003be:	4770      	bx	lr

080003c0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80003c4:	e7fe      	b.n	80003c4 <HardFault_Handler+0x4>

080003c6 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80003c6:	b480      	push	{r7}
 80003c8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80003ca:	e7fe      	b.n	80003ca <MemManage_Handler+0x4>

080003cc <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80003d0:	e7fe      	b.n	80003d0 <BusFault_Handler+0x4>

080003d2 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80003d2:	b480      	push	{r7}
 80003d4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80003d6:	e7fe      	b.n	80003d6 <UsageFault_Handler+0x4>

080003d8 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
}
 80003dc:	bf00      	nop
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr

080003e6 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80003e6:	b480      	push	{r7}
 80003e8:	af00      	add	r7, sp, #0
}
 80003ea:	bf00      	nop
 80003ec:	46bd      	mov	sp, r7
 80003ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f2:	4770      	bx	lr

080003f4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr

08000402 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000402:	b480      	push	{r7}
 8000404:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8000406:	bf00      	nop
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr

08000410 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000414:	4a16      	ldr	r2, [pc, #88]	; (8000470 <SystemInit+0x60>)
 8000416:	4b16      	ldr	r3, [pc, #88]	; (8000470 <SystemInit+0x60>)
 8000418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800041c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000420:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000424:	4a13      	ldr	r2, [pc, #76]	; (8000474 <SystemInit+0x64>)
 8000426:	4b13      	ldr	r3, [pc, #76]	; (8000474 <SystemInit+0x64>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	f043 0301 	orr.w	r3, r3, #1
 800042e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000430:	4b10      	ldr	r3, [pc, #64]	; (8000474 <SystemInit+0x64>)
 8000432:	2200      	movs	r2, #0
 8000434:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000436:	4a0f      	ldr	r2, [pc, #60]	; (8000474 <SystemInit+0x64>)
 8000438:	4b0e      	ldr	r3, [pc, #56]	; (8000474 <SystemInit+0x64>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000440:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000444:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000446:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <SystemInit+0x64>)
 8000448:	4a0b      	ldr	r2, [pc, #44]	; (8000478 <SystemInit+0x68>)
 800044a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800044c:	4a09      	ldr	r2, [pc, #36]	; (8000474 <SystemInit+0x64>)
 800044e:	4b09      	ldr	r3, [pc, #36]	; (8000474 <SystemInit+0x64>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000456:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000458:	4b06      	ldr	r3, [pc, #24]	; (8000474 <SystemInit+0x64>)
 800045a:	2200      	movs	r2, #0
 800045c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800045e:	f000 f80d 	bl	800047c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000462:	4b03      	ldr	r3, [pc, #12]	; (8000470 <SystemInit+0x60>)
 8000464:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000468:	609a      	str	r2, [r3, #8]
#endif
}
 800046a:	bf00      	nop
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	e000ed00 	.word	0xe000ed00
 8000474:	40023800 	.word	0x40023800
 8000478:	24003010 	.word	0x24003010

0800047c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000482:	2300      	movs	r3, #0
 8000484:	607b      	str	r3, [r7, #4]
 8000486:	2300      	movs	r3, #0
 8000488:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800048a:	4a36      	ldr	r2, [pc, #216]	; (8000564 <SetSysClock+0xe8>)
 800048c:	4b35      	ldr	r3, [pc, #212]	; (8000564 <SetSysClock+0xe8>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000494:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000496:	4b33      	ldr	r3, [pc, #204]	; (8000564 <SetSysClock+0xe8>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800049e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	3301      	adds	r3, #1
 80004a4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80004a6:	683b      	ldr	r3, [r7, #0]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d103      	bne.n	80004b4 <SetSysClock+0x38>
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80004b2:	d1f0      	bne.n	8000496 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80004b4:	4b2b      	ldr	r3, [pc, #172]	; (8000564 <SetSysClock+0xe8>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d002      	beq.n	80004c6 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80004c0:	2301      	movs	r3, #1
 80004c2:	603b      	str	r3, [r7, #0]
 80004c4:	e001      	b.n	80004ca <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80004c6:	2300      	movs	r3, #0
 80004c8:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	2b01      	cmp	r3, #1
 80004ce:	d142      	bne.n	8000556 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80004d0:	4a24      	ldr	r2, [pc, #144]	; (8000564 <SetSysClock+0xe8>)
 80004d2:	4b24      	ldr	r3, [pc, #144]	; (8000564 <SetSysClock+0xe8>)
 80004d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004da:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80004dc:	4a22      	ldr	r2, [pc, #136]	; (8000568 <SetSysClock+0xec>)
 80004de:	4b22      	ldr	r3, [pc, #136]	; (8000568 <SetSysClock+0xec>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80004e6:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80004e8:	4a1e      	ldr	r2, [pc, #120]	; (8000564 <SetSysClock+0xe8>)
 80004ea:	4b1e      	ldr	r3, [pc, #120]	; (8000564 <SetSysClock+0xe8>)
 80004ec:	689b      	ldr	r3, [r3, #8]
 80004ee:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80004f0:	4a1c      	ldr	r2, [pc, #112]	; (8000564 <SetSysClock+0xe8>)
 80004f2:	4b1c      	ldr	r3, [pc, #112]	; (8000564 <SetSysClock+0xe8>)
 80004f4:	689b      	ldr	r3, [r3, #8]
 80004f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004fa:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80004fc:	4a19      	ldr	r2, [pc, #100]	; (8000564 <SetSysClock+0xe8>)
 80004fe:	4b19      	ldr	r3, [pc, #100]	; (8000564 <SetSysClock+0xe8>)
 8000500:	689b      	ldr	r3, [r3, #8]
 8000502:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000506:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000508:	4b16      	ldr	r3, [pc, #88]	; (8000564 <SetSysClock+0xe8>)
 800050a:	4a18      	ldr	r2, [pc, #96]	; (800056c <SetSysClock+0xf0>)
 800050c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800050e:	4a15      	ldr	r2, [pc, #84]	; (8000564 <SetSysClock+0xe8>)
 8000510:	4b14      	ldr	r3, [pc, #80]	; (8000564 <SetSysClock+0xe8>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000518:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800051a:	bf00      	nop
 800051c:	4b11      	ldr	r3, [pc, #68]	; (8000564 <SetSysClock+0xe8>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000524:	2b00      	cmp	r3, #0
 8000526:	d0f9      	beq.n	800051c <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000528:	4b11      	ldr	r3, [pc, #68]	; (8000570 <SetSysClock+0xf4>)
 800052a:	f240 7205 	movw	r2, #1797	; 0x705
 800052e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000530:	4a0c      	ldr	r2, [pc, #48]	; (8000564 <SetSysClock+0xe8>)
 8000532:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <SetSysClock+0xe8>)
 8000534:	689b      	ldr	r3, [r3, #8]
 8000536:	f023 0303 	bic.w	r3, r3, #3
 800053a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800053c:	4a09      	ldr	r2, [pc, #36]	; (8000564 <SetSysClock+0xe8>)
 800053e:	4b09      	ldr	r3, [pc, #36]	; (8000564 <SetSysClock+0xe8>)
 8000540:	689b      	ldr	r3, [r3, #8]
 8000542:	f043 0302 	orr.w	r3, r3, #2
 8000546:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000548:	bf00      	nop
 800054a:	4b06      	ldr	r3, [pc, #24]	; (8000564 <SetSysClock+0xe8>)
 800054c:	689b      	ldr	r3, [r3, #8]
 800054e:	f003 030c 	and.w	r3, r3, #12
 8000552:	2b08      	cmp	r3, #8
 8000554:	d1f9      	bne.n	800054a <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000556:	bf00      	nop
 8000558:	370c      	adds	r7, #12
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	40023800 	.word	0x40023800
 8000568:	40007000 	.word	0x40007000
 800056c:	07405419 	.word	0x07405419
 8000570:	40023c00 	.word	0x40023c00

08000574 <__libc_init_array>:
 8000574:	b570      	push	{r4, r5, r6, lr}
 8000576:	4e0d      	ldr	r6, [pc, #52]	; (80005ac <__libc_init_array+0x38>)
 8000578:	4c0d      	ldr	r4, [pc, #52]	; (80005b0 <__libc_init_array+0x3c>)
 800057a:	1ba4      	subs	r4, r4, r6
 800057c:	10a4      	asrs	r4, r4, #2
 800057e:	2500      	movs	r5, #0
 8000580:	42a5      	cmp	r5, r4
 8000582:	d109      	bne.n	8000598 <__libc_init_array+0x24>
 8000584:	4e0b      	ldr	r6, [pc, #44]	; (80005b4 <__libc_init_array+0x40>)
 8000586:	4c0c      	ldr	r4, [pc, #48]	; (80005b8 <__libc_init_array+0x44>)
 8000588:	f000 f818 	bl	80005bc <_init>
 800058c:	1ba4      	subs	r4, r4, r6
 800058e:	10a4      	asrs	r4, r4, #2
 8000590:	2500      	movs	r5, #0
 8000592:	42a5      	cmp	r5, r4
 8000594:	d105      	bne.n	80005a2 <__libc_init_array+0x2e>
 8000596:	bd70      	pop	{r4, r5, r6, pc}
 8000598:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800059c:	4798      	blx	r3
 800059e:	3501      	adds	r5, #1
 80005a0:	e7ee      	b.n	8000580 <__libc_init_array+0xc>
 80005a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80005a6:	4798      	blx	r3
 80005a8:	3501      	adds	r5, #1
 80005aa:	e7f2      	b.n	8000592 <__libc_init_array+0x1e>
 80005ac:	080005d4 	.word	0x080005d4
 80005b0:	080005d4 	.word	0x080005d4
 80005b4:	080005d4 	.word	0x080005d4
 80005b8:	080005d8 	.word	0x080005d8

080005bc <_init>:
 80005bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005be:	bf00      	nop
 80005c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005c2:	bc08      	pop	{r3}
 80005c4:	469e      	mov	lr, r3
 80005c6:	4770      	bx	lr

080005c8 <_fini>:
 80005c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ca:	bf00      	nop
 80005cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ce:	bc08      	pop	{r3}
 80005d0:	469e      	mov	lr, r3
 80005d2:	4770      	bx	lr

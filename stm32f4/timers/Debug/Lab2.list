
Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000468  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005f0  080005f8  000105f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080005f0  080005f0  000105f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080005f4  080005f4  000105f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  000105f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000105f8  2**0
                  CONTENTS
  7 .bss          00000024  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000024  20000024  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000105f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00000f2c  00000000  00000000  00010628  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000370  00000000  00000000  00011554  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000000f8  00000000  00000000  000118c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000c0  00000000  00000000  000119c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000006b3  00000000  00000000  00011a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000060e  00000000  00000000  00012133  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00012741  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000274  00000000  00000000  000127c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00012a34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080005d8 	.word	0x080005d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080005d8 	.word	0x080005d8

080001c8 <ConfigTimer2>:
**  Abstract: main program
**
**===========================================================================
*/
void ConfigTimer2(int p_freq)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	const int peripheral_clk = 53760000/2; //
 80001d0:	4b1c      	ldr	r3, [pc, #112]	; (8000244 <ConfigTimer2+0x7c>)
 80001d2:	60fb      	str	r3, [r7, #12]
	const int prescaller = 499;
 80001d4:	f240 13f3 	movw	r3, #499	; 0x1f3
 80001d8:	60bb      	str	r3, [r7, #8]

	//registre RCC_ APB1ENR Reg

	RCC->APB1ENR |= BIT0;
 80001da:	4a1b      	ldr	r2, [pc, #108]	; (8000248 <ConfigTimer2+0x80>)
 80001dc:	4b1a      	ldr	r3, [pc, #104]	; (8000248 <ConfigTimer2+0x80>)
 80001de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80001e0:	f043 0301 	orr.w	r3, r3, #1
 80001e4:	6413      	str	r3, [r2, #64]	; 0x40

	//Rien a config dans le registre TIM2_CR1 et TIM2_CR2
	//registre TIM2_DIER pour les interrruptions a chaque fois remise a 0, interruption avec le bit 0;
	TIM2->DIER |= BIT0; //registre TIM2_DIER pour les interrruptions a chaque fois remise a 0, interruption avec le bit 0;
 80001e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80001ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001ee:	899b      	ldrh	r3, [r3, #12]
 80001f0:	b29b      	uxth	r3, r3
 80001f2:	f043 0301 	orr.w	r3, r3, #1
 80001f6:	b29b      	uxth	r3, r3
 80001f8:	8193      	strh	r3, [r2, #12]
	TIM2->PSC = prescaller;
 80001fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001fe:	68ba      	ldr	r2, [r7, #8]
 8000200:	b292      	uxth	r2, r2
 8000202:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM2->ARR = (peripheral_clk/prescaller)/p_freq;//autoreload register
 8000204:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000208:	68fa      	ldr	r2, [r7, #12]
 800020a:	68bb      	ldr	r3, [r7, #8]
 800020c:	fb92 f2f3 	sdiv	r2, r2, r3
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	fb92 f3f3 	sdiv	r3, r2, r3
 8000216:	62cb      	str	r3, [r1, #44]	; 0x2c

	//il faut enable le systic pour les interruptions dans le cortexm4 user guide dans le nvic, il faut apres aller voir la table des vecteurs d'interruptions dans le startup_stm32f40xx.s et notre periph timer est a la place 28 (ligne 183), il faut mettre le bit 28 a 1
	NVIC->ISER[0] |= BIT28;
 8000218:	4a0c      	ldr	r2, [pc, #48]	; (800024c <ConfigTimer2+0x84>)
 800021a:	4b0c      	ldr	r3, [pc, #48]	; (800024c <ConfigTimer2+0x84>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000222:	6013      	str	r3, [r2, #0]

	TIM2->CR1 |= BIT0; //enable le timer2
 8000224:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000228:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800022c:	881b      	ldrh	r3, [r3, #0]
 800022e:	b29b      	uxth	r3, r3
 8000230:	f043 0301 	orr.w	r3, r3, #1
 8000234:	b29b      	uxth	r3, r3
 8000236:	8013      	strh	r3, [r2, #0]
}
 8000238:	bf00      	nop
 800023a:	3714      	adds	r7, #20
 800023c:	46bd      	mov	sp, r7
 800023e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000242:	4770      	bx	lr
 8000244:	019a2800 	.word	0x019a2800
 8000248:	40023800 	.word	0x40023800
 800024c:	e000e100 	.word	0xe000e100

08000250 <Gpio_LED_Init>:


void Gpio_LED_Init(){
 8000250:	b480      	push	{r7}
 8000252:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= BIT3 ;//RCC, clock enabled for gpioD(BIT3)
 8000254:	4a08      	ldr	r2, [pc, #32]	; (8000278 <Gpio_LED_Init+0x28>)
 8000256:	4b08      	ldr	r3, [pc, #32]	; (8000278 <Gpio_LED_Init+0x28>)
 8000258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800025a:	f043 0308 	orr.w	r3, r3, #8
 800025e:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOD->MODER |= (BIT24 + BIT26 + BIT28+ BIT30); //Mise sur output des pins 12,13,14,15 (code 01 dans le registre)
 8000260:	4a06      	ldr	r2, [pc, #24]	; (800027c <Gpio_LED_Init+0x2c>)
 8000262:	4b06      	ldr	r3, [pc, #24]	; (800027c <Gpio_LED_Init+0x2c>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 800026a:	6013      	str	r3, [r2, #0]
}
 800026c:	bf00      	nop
 800026e:	46bd      	mov	sp, r7
 8000270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	40023800 	.word	0x40023800
 800027c:	40020c00 	.word	0x40020c00

08000280 <configureAndStartSystick>:

void configureAndStartSystick(int p_freq){//hologe du processeur est 53.73Mhz, l'autre est 53.73Mhz/8
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	const int systick_clk = 53760000/8;// on doit utiliser l'horloge du processeur pour pouvoir utiliser des insterruptions(trop rapide)
 8000288:	4b0c      	ldr	r3, [pc, #48]	; (80002bc <configureAndStartSystick+0x3c>)
 800028a:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD = systick_clk/p_freq;//on compte jusqu'a 1
 800028c:	490c      	ldr	r1, [pc, #48]	; (80002c0 <configureAndStartSystick+0x40>)
 800028e:	68fa      	ldr	r2, [r7, #12]
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	fb92 f3f3 	sdiv	r3, r2, r3
 8000296:	604b      	str	r3, [r1, #4]
	SysTick->CTRL |= BIT0 |BIT1;//BIT0 pour Enable et BIT1 pour Enable SysTick exception request
 8000298:	4a09      	ldr	r2, [pc, #36]	; (80002c0 <configureAndStartSystick+0x40>)
 800029a:	4b09      	ldr	r3, [pc, #36]	; (80002c0 <configureAndStartSystick+0x40>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f043 0303 	orr.w	r3, r3, #3
 80002a2:	6013      	str	r3, [r2, #0]
	SysTick->VAL = systick_clk/p_freq;//lire ou ecrire en tout temps la valeur du compteur
 80002a4:	4906      	ldr	r1, [pc, #24]	; (80002c0 <configureAndStartSystick+0x40>)
 80002a6:	68fa      	ldr	r2, [r7, #12]
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80002ae:	608b      	str	r3, [r1, #8]
}
 80002b0:	bf00      	nop
 80002b2:	3714      	adds	r7, #20
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr
 80002bc:	00668a00 	.word	0x00668a00
 80002c0:	e000e010 	.word	0xe000e010

080002c4 <main>:

int main(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
//#pragma pack // pour enlever l'alignement de la prochaine variable
  Gpio_LED_Init();
 80002c8:	f7ff ffc2 	bl	8000250 <Gpio_LED_Init>
  configureAndStartSystick(2000); //f = 2kHz soit T = 0.5 ms
 80002cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002d0:	f7ff ffd6 	bl	8000280 <configureAndStartSystick>
  ConfigTimer2(2); //  f = 2Hz soit T = 0.5s
 80002d4:	2002      	movs	r0, #2
 80002d6:	f7ff ff77 	bl	80001c8 <ConfigTimer2>

  while (1)
  {
	  if(counter2 == 3)
 80002da:	4b0d      	ldr	r3, [pc, #52]	; (8000310 <main+0x4c>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	2b03      	cmp	r3, #3
 80002e0:	d108      	bne.n	80002f4 <main+0x30>
	  {
		  counter2 = 0;
 80002e2:	4b0b      	ldr	r3, [pc, #44]	; (8000310 <main+0x4c>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
		  GPIOD->ODR &= ~(BIT13|BIT14); // si le bit est a 0 le met a 1 et inversement
 80002e8:	4a0a      	ldr	r2, [pc, #40]	; (8000314 <main+0x50>)
 80002ea:	4b0a      	ldr	r3, [pc, #40]	; (8000314 <main+0x50>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80002f2:	6153      	str	r3, [r2, #20]
	  }
	  if(counter == 3)
 80002f4:	4b08      	ldr	r3, [pc, #32]	; (8000318 <main+0x54>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	2b03      	cmp	r3, #3
 80002fa:	d1ee      	bne.n	80002da <main+0x16>
	  {
		  counter = 0;
 80002fc:	4b06      	ldr	r3, [pc, #24]	; (8000318 <main+0x54>)
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
		  GPIOD->ODR &= ~(BIT12|BIT15); // si le bit est a 0 le met a 1 et inversement
 8000302:	4a04      	ldr	r2, [pc, #16]	; (8000314 <main+0x50>)
 8000304:	4b03      	ldr	r3, [pc, #12]	; (8000314 <main+0x50>)
 8000306:	695b      	ldr	r3, [r3, #20]
 8000308:	f423 4310 	bic.w	r3, r3, #36864	; 0x9000
 800030c:	6153      	str	r3, [r2, #20]
	  if(counter2 == 3)
 800030e:	e7e4      	b.n	80002da <main+0x16>
 8000310:	20000020 	.word	0x20000020
 8000314:	40020c00 	.word	0x40020c00
 8000318:	2000001c 	.word	0x2000001c

0800031c <TIM2_IRQHandler>:
	  }

  }
}

void TIM2_IRQHandler(void) {
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
	TIM2->SR &= ~BIT0; //pour clear le flag
 8000320:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000324:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000328:	8a1b      	ldrh	r3, [r3, #16]
 800032a:	b29b      	uxth	r3, r3
 800032c:	f023 0301 	bic.w	r3, r3, #1
 8000330:	b29b      	uxth	r3, r3
 8000332:	8213      	strh	r3, [r2, #16]
	counter++;
 8000334:	4b07      	ldr	r3, [pc, #28]	; (8000354 <TIM2_IRQHandler+0x38>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	3301      	adds	r3, #1
 800033a:	4a06      	ldr	r2, [pc, #24]	; (8000354 <TIM2_IRQHandler+0x38>)
 800033c:	6013      	str	r3, [r2, #0]
	GPIOD->ODR |= BIT12|BIT15; // si le bit est a 0 le met a 1 et inversement
 800033e:	4a06      	ldr	r2, [pc, #24]	; (8000358 <TIM2_IRQHandler+0x3c>)
 8000340:	4b05      	ldr	r3, [pc, #20]	; (8000358 <TIM2_IRQHandler+0x3c>)
 8000342:	695b      	ldr	r3, [r3, #20]
 8000344:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
 8000348:	6153      	str	r3, [r2, #20]
	//GPIOD->ODR ^= BIT12|BIT15;
}
 800034a:	bf00      	nop
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr
 8000354:	2000001c 	.word	0x2000001c
 8000358:	40020c00 	.word	0x40020c00

0800035c <SysTick_Handler>:

void SysTick_Handler(void) {
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
	counter2++;
 8000360:	4b07      	ldr	r3, [pc, #28]	; (8000380 <SysTick_Handler+0x24>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	3301      	adds	r3, #1
 8000366:	4a06      	ldr	r2, [pc, #24]	; (8000380 <SysTick_Handler+0x24>)
 8000368:	6013      	str	r3, [r2, #0]
	GPIOD->ODR |= BIT13|BIT14; // si le bit est a 0 le met a 1 et inversement
 800036a:	4a06      	ldr	r2, [pc, #24]	; (8000384 <SysTick_Handler+0x28>)
 800036c:	4b05      	ldr	r3, [pc, #20]	; (8000384 <SysTick_Handler+0x28>)
 800036e:	695b      	ldr	r3, [r3, #20]
 8000370:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8000374:	6153      	str	r3, [r2, #20]
	//GPIOD->ODR ^= BIT13|BIT14;
}
 8000376:	bf00      	nop
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr
 8000380:	20000020 	.word	0x20000020
 8000384:	40020c00 	.word	0x40020c00

08000388 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000388:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003c0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800038c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800038e:	e003      	b.n	8000398 <LoopCopyDataInit>

08000390 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000390:	4b0c      	ldr	r3, [pc, #48]	; (80003c4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000392:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000394:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000396:	3104      	adds	r1, #4

08000398 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000398:	480b      	ldr	r0, [pc, #44]	; (80003c8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800039a:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800039c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800039e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80003a0:	d3f6      	bcc.n	8000390 <CopyDataInit>
  ldr  r2, =_sbss
 80003a2:	4a0b      	ldr	r2, [pc, #44]	; (80003d0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80003a4:	e002      	b.n	80003ac <LoopFillZerobss>

080003a6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80003a6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80003a8:	f842 3b04 	str.w	r3, [r2], #4

080003ac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003ac:	4b09      	ldr	r3, [pc, #36]	; (80003d4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80003ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80003b0:	d3f9      	bcc.n	80003a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003b2:	f000 f83b 	bl	800042c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003b6:	f000 f8eb 	bl	8000590 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003ba:	f7ff ff83 	bl	80002c4 <main>
  bx  lr    
 80003be:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003c0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80003c4:	080005f8 	.word	0x080005f8
  ldr  r0, =_sdata
 80003c8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80003cc:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 80003d0:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 80003d4:	20000024 	.word	0x20000024

080003d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003d8:	e7fe      	b.n	80003d8 <ADC_IRQHandler>

080003da <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80003da:	b480      	push	{r7}
 80003dc:	af00      	add	r7, sp, #0
}
 80003de:	bf00      	nop
 80003e0:	46bd      	mov	sp, r7
 80003e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e6:	4770      	bx	lr

080003e8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80003ec:	e7fe      	b.n	80003ec <HardFault_Handler+0x4>

080003ee <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80003ee:	b480      	push	{r7}
 80003f0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80003f2:	e7fe      	b.n	80003f2 <MemManage_Handler+0x4>

080003f4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80003f8:	e7fe      	b.n	80003f8 <BusFault_Handler+0x4>

080003fa <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80003fa:	b480      	push	{r7}
 80003fc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80003fe:	e7fe      	b.n	80003fe <UsageFault_Handler+0x4>

08000400 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
}
 8000404:	bf00      	nop
 8000406:	46bd      	mov	sp, r7
 8000408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040c:	4770      	bx	lr

0800040e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800040e:	b480      	push	{r7}
 8000410:	af00      	add	r7, sp, #0
}
 8000412:	bf00      	nop
 8000414:	46bd      	mov	sp, r7
 8000416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041a:	4770      	bx	lr

0800041c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
}
 8000420:	bf00      	nop
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr
	...

0800042c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000430:	4a16      	ldr	r2, [pc, #88]	; (800048c <SystemInit+0x60>)
 8000432:	4b16      	ldr	r3, [pc, #88]	; (800048c <SystemInit+0x60>)
 8000434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000438:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800043c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000440:	4a13      	ldr	r2, [pc, #76]	; (8000490 <SystemInit+0x64>)
 8000442:	4b13      	ldr	r3, [pc, #76]	; (8000490 <SystemInit+0x64>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	f043 0301 	orr.w	r3, r3, #1
 800044a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800044c:	4b10      	ldr	r3, [pc, #64]	; (8000490 <SystemInit+0x64>)
 800044e:	2200      	movs	r2, #0
 8000450:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000452:	4a0f      	ldr	r2, [pc, #60]	; (8000490 <SystemInit+0x64>)
 8000454:	4b0e      	ldr	r3, [pc, #56]	; (8000490 <SystemInit+0x64>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800045c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000460:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000462:	4b0b      	ldr	r3, [pc, #44]	; (8000490 <SystemInit+0x64>)
 8000464:	4a0b      	ldr	r2, [pc, #44]	; (8000494 <SystemInit+0x68>)
 8000466:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000468:	4a09      	ldr	r2, [pc, #36]	; (8000490 <SystemInit+0x64>)
 800046a:	4b09      	ldr	r3, [pc, #36]	; (8000490 <SystemInit+0x64>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000472:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000474:	4b06      	ldr	r3, [pc, #24]	; (8000490 <SystemInit+0x64>)
 8000476:	2200      	movs	r2, #0
 8000478:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800047a:	f000 f80d 	bl	8000498 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800047e:	4b03      	ldr	r3, [pc, #12]	; (800048c <SystemInit+0x60>)
 8000480:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000484:	609a      	str	r2, [r3, #8]
#endif
}
 8000486:	bf00      	nop
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	e000ed00 	.word	0xe000ed00
 8000490:	40023800 	.word	0x40023800
 8000494:	24003010 	.word	0x24003010

08000498 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800049e:	2300      	movs	r3, #0
 80004a0:	607b      	str	r3, [r7, #4]
 80004a2:	2300      	movs	r3, #0
 80004a4:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80004a6:	4a36      	ldr	r2, [pc, #216]	; (8000580 <SetSysClock+0xe8>)
 80004a8:	4b35      	ldr	r3, [pc, #212]	; (8000580 <SetSysClock+0xe8>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004b0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80004b2:	4b33      	ldr	r3, [pc, #204]	; (8000580 <SetSysClock+0xe8>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004ba:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	3301      	adds	r3, #1
 80004c0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d103      	bne.n	80004d0 <SetSysClock+0x38>
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80004ce:	d1f0      	bne.n	80004b2 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80004d0:	4b2b      	ldr	r3, [pc, #172]	; (8000580 <SetSysClock+0xe8>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d002      	beq.n	80004e2 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80004dc:	2301      	movs	r3, #1
 80004de:	603b      	str	r3, [r7, #0]
 80004e0:	e001      	b.n	80004e6 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80004e2:	2300      	movs	r3, #0
 80004e4:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	2b01      	cmp	r3, #1
 80004ea:	d142      	bne.n	8000572 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80004ec:	4a24      	ldr	r2, [pc, #144]	; (8000580 <SetSysClock+0xe8>)
 80004ee:	4b24      	ldr	r3, [pc, #144]	; (8000580 <SetSysClock+0xe8>)
 80004f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004f6:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80004f8:	4a22      	ldr	r2, [pc, #136]	; (8000584 <SetSysClock+0xec>)
 80004fa:	4b22      	ldr	r3, [pc, #136]	; (8000584 <SetSysClock+0xec>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000502:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000504:	4a1e      	ldr	r2, [pc, #120]	; (8000580 <SetSysClock+0xe8>)
 8000506:	4b1e      	ldr	r3, [pc, #120]	; (8000580 <SetSysClock+0xe8>)
 8000508:	689b      	ldr	r3, [r3, #8]
 800050a:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800050c:	4a1c      	ldr	r2, [pc, #112]	; (8000580 <SetSysClock+0xe8>)
 800050e:	4b1c      	ldr	r3, [pc, #112]	; (8000580 <SetSysClock+0xe8>)
 8000510:	689b      	ldr	r3, [r3, #8]
 8000512:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000516:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000518:	4a19      	ldr	r2, [pc, #100]	; (8000580 <SetSysClock+0xe8>)
 800051a:	4b19      	ldr	r3, [pc, #100]	; (8000580 <SetSysClock+0xe8>)
 800051c:	689b      	ldr	r3, [r3, #8]
 800051e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000522:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000524:	4b16      	ldr	r3, [pc, #88]	; (8000580 <SetSysClock+0xe8>)
 8000526:	4a18      	ldr	r2, [pc, #96]	; (8000588 <SetSysClock+0xf0>)
 8000528:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800052a:	4a15      	ldr	r2, [pc, #84]	; (8000580 <SetSysClock+0xe8>)
 800052c:	4b14      	ldr	r3, [pc, #80]	; (8000580 <SetSysClock+0xe8>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000534:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000536:	bf00      	nop
 8000538:	4b11      	ldr	r3, [pc, #68]	; (8000580 <SetSysClock+0xe8>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000540:	2b00      	cmp	r3, #0
 8000542:	d0f9      	beq.n	8000538 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000544:	4b11      	ldr	r3, [pc, #68]	; (800058c <SetSysClock+0xf4>)
 8000546:	f240 7205 	movw	r2, #1797	; 0x705
 800054a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800054c:	4a0c      	ldr	r2, [pc, #48]	; (8000580 <SetSysClock+0xe8>)
 800054e:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <SetSysClock+0xe8>)
 8000550:	689b      	ldr	r3, [r3, #8]
 8000552:	f023 0303 	bic.w	r3, r3, #3
 8000556:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000558:	4a09      	ldr	r2, [pc, #36]	; (8000580 <SetSysClock+0xe8>)
 800055a:	4b09      	ldr	r3, [pc, #36]	; (8000580 <SetSysClock+0xe8>)
 800055c:	689b      	ldr	r3, [r3, #8]
 800055e:	f043 0302 	orr.w	r3, r3, #2
 8000562:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000564:	bf00      	nop
 8000566:	4b06      	ldr	r3, [pc, #24]	; (8000580 <SetSysClock+0xe8>)
 8000568:	689b      	ldr	r3, [r3, #8]
 800056a:	f003 030c 	and.w	r3, r3, #12
 800056e:	2b08      	cmp	r3, #8
 8000570:	d1f9      	bne.n	8000566 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000572:	bf00      	nop
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	40023800 	.word	0x40023800
 8000584:	40007000 	.word	0x40007000
 8000588:	07405419 	.word	0x07405419
 800058c:	40023c00 	.word	0x40023c00

08000590 <__libc_init_array>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	4e0d      	ldr	r6, [pc, #52]	; (80005c8 <__libc_init_array+0x38>)
 8000594:	4c0d      	ldr	r4, [pc, #52]	; (80005cc <__libc_init_array+0x3c>)
 8000596:	1ba4      	subs	r4, r4, r6
 8000598:	10a4      	asrs	r4, r4, #2
 800059a:	2500      	movs	r5, #0
 800059c:	42a5      	cmp	r5, r4
 800059e:	d109      	bne.n	80005b4 <__libc_init_array+0x24>
 80005a0:	4e0b      	ldr	r6, [pc, #44]	; (80005d0 <__libc_init_array+0x40>)
 80005a2:	4c0c      	ldr	r4, [pc, #48]	; (80005d4 <__libc_init_array+0x44>)
 80005a4:	f000 f818 	bl	80005d8 <_init>
 80005a8:	1ba4      	subs	r4, r4, r6
 80005aa:	10a4      	asrs	r4, r4, #2
 80005ac:	2500      	movs	r5, #0
 80005ae:	42a5      	cmp	r5, r4
 80005b0:	d105      	bne.n	80005be <__libc_init_array+0x2e>
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80005b8:	4798      	blx	r3
 80005ba:	3501      	adds	r5, #1
 80005bc:	e7ee      	b.n	800059c <__libc_init_array+0xc>
 80005be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80005c2:	4798      	blx	r3
 80005c4:	3501      	adds	r5, #1
 80005c6:	e7f2      	b.n	80005ae <__libc_init_array+0x1e>
 80005c8:	080005f0 	.word	0x080005f0
 80005cc:	080005f0 	.word	0x080005f0
 80005d0:	080005f0 	.word	0x080005f0
 80005d4:	080005f4 	.word	0x080005f4

080005d8 <_init>:
 80005d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005da:	bf00      	nop
 80005dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005de:	bc08      	pop	{r3}
 80005e0:	469e      	mov	lr, r3
 80005e2:	4770      	bx	lr

080005e4 <_fini>:
 80005e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005e6:	bf00      	nop
 80005e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ea:	bc08      	pop	{r3}
 80005ec:	469e      	mov	lr, r3
 80005ee:	4770      	bx	lr
